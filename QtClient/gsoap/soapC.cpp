/* soapC.cpp
   Generated by gSOAP 2.8.9 from test.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.9 2012-08-24 02:27:07 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns2__ArrayOfstring:
		return soap_in_ns2__ArrayOfstring(soap, NULL, NULL, "ns2:ArrayOfstring");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse:
		return soap_in_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, NULL, NULL, "tempuri:ExecuteSqlTransaction_BoolResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool:
		return soap_in_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, NULL, NULL, "tempuri:ExecuteSqlTransaction_Bool");
	case SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse:
		return soap_in_PointerTo_tempuri__DataAdapterResponse(soap, NULL, NULL, "tempuri:DataAdapterResponse");
	case SOAP_TYPE_PointerTo_tempuri__DataAdapter:
		return soap_in_PointerTo_tempuri__DataAdapter(soap, NULL, NULL, "tempuri:DataAdapter");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse:
		return soap_in_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(soap, NULL, NULL, "tempuri:ExecuteScalar_ObjectResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObject:
		return soap_in_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, NULL, NULL, "tempuri:ExecuteScalar_Object");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse:
		return soap_in_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(soap, NULL, NULL, "tempuri:ExecuteScalar_StringResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREString:
		return soap_in_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, NULL, NULL, "tempuri:ExecuteScalar_String");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse:
		return soap_in_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(soap, NULL, NULL, "tempuri:ExecuteScalar_BoolResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBool:
		return soap_in_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, NULL, NULL, "tempuri:ExecuteScalar_Bool");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteNonQueryResponse:
		return soap_in_PointerTo_tempuri__ExecuteNonQueryResponse(soap, NULL, NULL, "tempuri:ExecuteNonQueryResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteNonQuery:
		return soap_in_PointerTo_tempuri__ExecuteNonQuery(soap, NULL, NULL, "tempuri:ExecuteNonQuery");
	case SOAP_TYPE_PointerTo_tempuri__GetstringResponse:
		return soap_in_PointerTo_tempuri__GetstringResponse(soap, NULL, NULL, "tempuri:GetstringResponse");
	case SOAP_TYPE_PointerTo_tempuri__Getstring:
		return soap_in_PointerTo_tempuri__Getstring(soap, NULL, NULL, "tempuri:Getstring");
	case SOAP_TYPE_PointerTons2__ArrayOfstring:
		return soap_in_PointerTons2__ArrayOfstring(soap, NULL, NULL, "ns2:ArrayOfstring");
	case SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult:
		return soap_in_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, NULL, NULL, "tempuri:DataAdapterResponse-DataAdapterResult");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_in_PointerToxsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns2:ArrayOfstring"))
		{	*type = SOAP_TYPE_ns2__ArrayOfstring;
			return soap_in_ns2__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "tempuri:DataAdapterResponse-DataAdapterResult"))
		{	*type = SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult;
			return soap_in__tempuri__DataAdapterResponse_DataAdapterResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DataSet"))
		{	*type = SOAP_TYPE__ns1__DataSet;
			return soap_in__ns1__DataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteSqlTransaction_BoolResponse"))
		{	*type = SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse;
			return soap_in__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteSqlTransaction_Bool"))
		{	*type = SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool;
			return soap_in__tempuri__ExecuteSqlTransaction_USCOREBool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:DataAdapterResponse"))
		{	*type = SOAP_TYPE__tempuri__DataAdapterResponse;
			return soap_in__tempuri__DataAdapterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:DataAdapter"))
		{	*type = SOAP_TYPE__tempuri__DataAdapter;
			return soap_in__tempuri__DataAdapter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteScalar_ObjectResponse"))
		{	*type = SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse;
			return soap_in__tempuri__ExecuteScalar_USCOREObjectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteScalar_Object"))
		{	*type = SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject;
			return soap_in__tempuri__ExecuteScalar_USCOREObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteScalar_StringResponse"))
		{	*type = SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse;
			return soap_in__tempuri__ExecuteScalar_USCOREStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteScalar_String"))
		{	*type = SOAP_TYPE__tempuri__ExecuteScalar_USCOREString;
			return soap_in__tempuri__ExecuteScalar_USCOREString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteScalar_BoolResponse"))
		{	*type = SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse;
			return soap_in__tempuri__ExecuteScalar_USCOREBoolResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteScalar_Bool"))
		{	*type = SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool;
			return soap_in__tempuri__ExecuteScalar_USCOREBool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteNonQueryResponse"))
		{	*type = SOAP_TYPE__tempuri__ExecuteNonQueryResponse;
			return soap_in__tempuri__ExecuteNonQueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:ExecuteNonQuery"))
		{	*type = SOAP_TYPE__tempuri__ExecuteNonQuery;
			return soap_in__tempuri__ExecuteNonQuery(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:GetstringResponse"))
		{	*type = SOAP_TYPE__tempuri__GetstringResponse;
			return soap_in__tempuri__GetstringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "tempuri:Getstring"))
		{	*type = SOAP_TYPE__tempuri__Getstring;
			return soap_in__tempuri__Getstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:schema"))
		{	char **s;
			*type = SOAP_TYPE__xsd__schema;
			s = soap_in__xsd__schema(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult:
		return ((_tempuri__DataAdapterResponse_DataAdapterResult *)ptr)->soap_out(soap, "tempuri:DataAdapterResponse-DataAdapterResult", id, NULL);
	case SOAP_TYPE_ns2__ArrayOfstring:
		return ((ns2__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "ns2:ArrayOfstring");
	case SOAP_TYPE__ns1__DataSet:
		return ((_ns1__DataSet *)ptr)->soap_out(soap, "ns1:DataSet", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse:
		return ((_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *)ptr)->soap_out(soap, "tempuri:ExecuteSqlTransaction_BoolResponse", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool:
		return ((_tempuri__ExecuteSqlTransaction_USCOREBool *)ptr)->soap_out(soap, "tempuri:ExecuteSqlTransaction_Bool", id, NULL);
	case SOAP_TYPE__tempuri__DataAdapterResponse:
		return ((_tempuri__DataAdapterResponse *)ptr)->soap_out(soap, "tempuri:DataAdapterResponse", id, NULL);
	case SOAP_TYPE__tempuri__DataAdapter:
		return ((_tempuri__DataAdapter *)ptr)->soap_out(soap, "tempuri:DataAdapter", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse:
		return ((_tempuri__ExecuteScalar_USCOREObjectResponse *)ptr)->soap_out(soap, "tempuri:ExecuteScalar_ObjectResponse", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject:
		return ((_tempuri__ExecuteScalar_USCOREObject *)ptr)->soap_out(soap, "tempuri:ExecuteScalar_Object", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse:
		return ((_tempuri__ExecuteScalar_USCOREStringResponse *)ptr)->soap_out(soap, "tempuri:ExecuteScalar_StringResponse", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREString:
		return ((_tempuri__ExecuteScalar_USCOREString *)ptr)->soap_out(soap, "tempuri:ExecuteScalar_String", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse:
		return ((_tempuri__ExecuteScalar_USCOREBoolResponse *)ptr)->soap_out(soap, "tempuri:ExecuteScalar_BoolResponse", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool:
		return ((_tempuri__ExecuteScalar_USCOREBool *)ptr)->soap_out(soap, "tempuri:ExecuteScalar_Bool", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteNonQueryResponse:
		return ((_tempuri__ExecuteNonQueryResponse *)ptr)->soap_out(soap, "tempuri:ExecuteNonQueryResponse", id, NULL);
	case SOAP_TYPE__tempuri__ExecuteNonQuery:
		return ((_tempuri__ExecuteNonQuery *)ptr)->soap_out(soap, "tempuri:ExecuteNonQuery", id, NULL);
	case SOAP_TYPE__tempuri__GetstringResponse:
		return ((_tempuri__GetstringResponse *)ptr)->soap_out(soap, "tempuri:GetstringResponse", id, NULL);
	case SOAP_TYPE__tempuri__Getstring:
		return ((_tempuri__Getstring *)ptr)->soap_out(soap, "tempuri:Getstring", id, NULL);
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse:
		return soap_out_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, tag, id, (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *const*)ptr, "tempuri:ExecuteSqlTransaction_BoolResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool:
		return soap_out_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag, id, (_tempuri__ExecuteSqlTransaction_USCOREBool *const*)ptr, "tempuri:ExecuteSqlTransaction_Bool");
	case SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse:
		return soap_out_PointerTo_tempuri__DataAdapterResponse(soap, tag, id, (_tempuri__DataAdapterResponse *const*)ptr, "tempuri:DataAdapterResponse");
	case SOAP_TYPE_PointerTo_tempuri__DataAdapter:
		return soap_out_PointerTo_tempuri__DataAdapter(soap, tag, id, (_tempuri__DataAdapter *const*)ptr, "tempuri:DataAdapter");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse:
		return soap_out_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(soap, tag, id, (_tempuri__ExecuteScalar_USCOREObjectResponse *const*)ptr, "tempuri:ExecuteScalar_ObjectResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObject:
		return soap_out_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, tag, id, (_tempuri__ExecuteScalar_USCOREObject *const*)ptr, "tempuri:ExecuteScalar_Object");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse:
		return soap_out_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(soap, tag, id, (_tempuri__ExecuteScalar_USCOREStringResponse *const*)ptr, "tempuri:ExecuteScalar_StringResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREString:
		return soap_out_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, tag, id, (_tempuri__ExecuteScalar_USCOREString *const*)ptr, "tempuri:ExecuteScalar_String");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse:
		return soap_out_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(soap, tag, id, (_tempuri__ExecuteScalar_USCOREBoolResponse *const*)ptr, "tempuri:ExecuteScalar_BoolResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBool:
		return soap_out_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, tag, id, (_tempuri__ExecuteScalar_USCOREBool *const*)ptr, "tempuri:ExecuteScalar_Bool");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteNonQueryResponse:
		return soap_out_PointerTo_tempuri__ExecuteNonQueryResponse(soap, tag, id, (_tempuri__ExecuteNonQueryResponse *const*)ptr, "tempuri:ExecuteNonQueryResponse");
	case SOAP_TYPE_PointerTo_tempuri__ExecuteNonQuery:
		return soap_out_PointerTo_tempuri__ExecuteNonQuery(soap, tag, id, (_tempuri__ExecuteNonQuery *const*)ptr, "tempuri:ExecuteNonQuery");
	case SOAP_TYPE_PointerTo_tempuri__GetstringResponse:
		return soap_out_PointerTo_tempuri__GetstringResponse(soap, tag, id, (_tempuri__GetstringResponse *const*)ptr, "tempuri:GetstringResponse");
	case SOAP_TYPE_PointerTo_tempuri__Getstring:
		return soap_out_PointerTo_tempuri__Getstring(soap, tag, id, (_tempuri__Getstring *const*)ptr, "tempuri:Getstring");
	case SOAP_TYPE_PointerTons2__ArrayOfstring:
		return soap_out_PointerTons2__ArrayOfstring(soap, tag, id, (ns2__ArrayOfstring *const*)ptr, "ns2:ArrayOfstring");
	case SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult:
		return soap_out_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, tag, id, (_tempuri__DataAdapterResponse_DataAdapterResult *const*)ptr, "tempuri:DataAdapterResponse-DataAdapterResult");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_out_PointerToxsd__anyType(soap, tag, id, (xsd__anyType *const*)ptr, "xsd:anyType");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__xsd__schema:
		return soap_out_string(soap, "xsd:schema", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult:
		((_tempuri__DataAdapterResponse_DataAdapterResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__ArrayOfstring:
		((ns2__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DataSet:
		((_ns1__DataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse:
		((_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool:
		((_tempuri__ExecuteSqlTransaction_USCOREBool *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__DataAdapterResponse:
		((_tempuri__DataAdapterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__DataAdapter:
		((_tempuri__DataAdapter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse:
		((_tempuri__ExecuteScalar_USCOREObjectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject:
		((_tempuri__ExecuteScalar_USCOREObject *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse:
		((_tempuri__ExecuteScalar_USCOREStringResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREString:
		((_tempuri__ExecuteScalar_USCOREString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse:
		((_tempuri__ExecuteScalar_USCOREBoolResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool:
		((_tempuri__ExecuteScalar_USCOREBool *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteNonQueryResponse:
		((_tempuri__ExecuteNonQueryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__ExecuteNonQuery:
		((_tempuri__ExecuteNonQuery *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__GetstringResponse:
		((_tempuri__GetstringResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__tempuri__Getstring:
		((_tempuri__Getstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___tempuri__ExecuteSqlTransaction_USCOREBool:
		soap_serialize___tempuri__ExecuteSqlTransaction_USCOREBool(soap, (const struct __tempuri__ExecuteSqlTransaction_USCOREBool *)ptr);
		break;
	case SOAP_TYPE___tempuri__DataAdapter:
		soap_serialize___tempuri__DataAdapter(soap, (const struct __tempuri__DataAdapter *)ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREObject:
		soap_serialize___tempuri__ExecuteScalar_USCOREObject(soap, (const struct __tempuri__ExecuteScalar_USCOREObject *)ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREString:
		soap_serialize___tempuri__ExecuteScalar_USCOREString(soap, (const struct __tempuri__ExecuteScalar_USCOREString *)ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREBool:
		soap_serialize___tempuri__ExecuteScalar_USCOREBool(soap, (const struct __tempuri__ExecuteScalar_USCOREBool *)ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteNonQuery:
		soap_serialize___tempuri__ExecuteNonQuery(soap, (const struct __tempuri__ExecuteNonQuery *)ptr);
		break;
	case SOAP_TYPE___tempuri__Getstring:
		soap_serialize___tempuri__Getstring(soap, (const struct __tempuri__Getstring *)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse:
		soap_serialize_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool:
		soap_serialize_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, (_tempuri__ExecuteSqlTransaction_USCOREBool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse:
		soap_serialize_PointerTo_tempuri__DataAdapterResponse(soap, (_tempuri__DataAdapterResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__DataAdapter:
		soap_serialize_PointerTo_tempuri__DataAdapter(soap, (_tempuri__DataAdapter *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse:
		soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(soap, (_tempuri__ExecuteScalar_USCOREObjectResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObject:
		soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, (_tempuri__ExecuteScalar_USCOREObject *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse:
		soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(soap, (_tempuri__ExecuteScalar_USCOREStringResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREString:
		soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, (_tempuri__ExecuteScalar_USCOREString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse:
		soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(soap, (_tempuri__ExecuteScalar_USCOREBoolResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBool:
		soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, (_tempuri__ExecuteScalar_USCOREBool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteNonQueryResponse:
		soap_serialize_PointerTo_tempuri__ExecuteNonQueryResponse(soap, (_tempuri__ExecuteNonQueryResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__ExecuteNonQuery:
		soap_serialize_PointerTo_tempuri__ExecuteNonQuery(soap, (_tempuri__ExecuteNonQuery *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__GetstringResponse:
		soap_serialize_PointerTo_tempuri__GetstringResponse(soap, (_tempuri__GetstringResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__Getstring:
		soap_serialize_PointerTo_tempuri__Getstring(soap, (_tempuri__Getstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__ArrayOfstring:
		soap_serialize_PointerTons2__ArrayOfstring(soap, (ns2__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult:
		soap_serialize_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, (_tempuri__DataAdapterResponse_DataAdapterResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyType:
		soap_serialize_PointerToxsd__anyType(soap, (xsd__anyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__xsd__schema:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__Getstring:
		return (void*)soap_instantiate__tempuri__Getstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__GetstringResponse:
		return (void*)soap_instantiate__tempuri__GetstringResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteNonQuery:
		return (void*)soap_instantiate__tempuri__ExecuteNonQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteNonQueryResponse:
		return (void*)soap_instantiate__tempuri__ExecuteNonQueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool:
		return (void*)soap_instantiate__tempuri__ExecuteScalar_USCOREBool(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse:
		return (void*)soap_instantiate__tempuri__ExecuteScalar_USCOREBoolResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREString:
		return (void*)soap_instantiate__tempuri__ExecuteScalar_USCOREString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse:
		return (void*)soap_instantiate__tempuri__ExecuteScalar_USCOREStringResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject:
		return (void*)soap_instantiate__tempuri__ExecuteScalar_USCOREObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse:
		return (void*)soap_instantiate__tempuri__ExecuteScalar_USCOREObjectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__DataAdapter:
		return (void*)soap_instantiate__tempuri__DataAdapter(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult:
		return (void*)soap_instantiate__tempuri__DataAdapterResponse_DataAdapterResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__DataAdapterResponse:
		return (void*)soap_instantiate__tempuri__DataAdapterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool:
		return (void*)soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBool(soap, -1, type, arrayType, n);
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse:
		return (void*)soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DataSet:
		return (void*)soap_instantiate__ns1__DataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ArrayOfstring:
		return (void*)soap_instantiate_ns2__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__Getstring:
		return (void*)soap_instantiate___tempuri__Getstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__ExecuteNonQuery:
		return (void*)soap_instantiate___tempuri__ExecuteNonQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREBool:
		return (void*)soap_instantiate___tempuri__ExecuteScalar_USCOREBool(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREString:
		return (void*)soap_instantiate___tempuri__ExecuteScalar_USCOREString(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREObject:
		return (void*)soap_instantiate___tempuri__ExecuteScalar_USCOREObject(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__DataAdapter:
		return (void*)soap_instantiate___tempuri__DataAdapter(soap, -1, type, arrayType, n);
	case SOAP_TYPE___tempuri__ExecuteSqlTransaction_USCOREBool:
		return (void*)soap_instantiate___tempuri__ExecuteSqlTransaction_USCOREBool(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyType*)p->ptr);
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE((xsd__boolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__boolean*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE((xsd__string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__string*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__Getstring:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__Getstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__Getstring*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__GetstringResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__GetstringResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__GetstringResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteNonQuery:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteNonQuery*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteNonQuery*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteNonQueryResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteNonQueryResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteNonQueryResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteScalar_USCOREBool*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteScalar_USCOREBool*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteScalar_USCOREBoolResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteScalar_USCOREBoolResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREString:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteScalar_USCOREString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteScalar_USCOREString*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteScalar_USCOREStringResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteScalar_USCOREStringResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteScalar_USCOREObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteScalar_USCOREObject*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteScalar_USCOREObjectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteScalar_USCOREObjectResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__DataAdapter:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__DataAdapter*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__DataAdapter*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__DataAdapterResponse_DataAdapterResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__DataAdapterResponse_DataAdapterResult*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__DataAdapterResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__DataAdapterResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__DataAdapterResponse*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteSqlTransaction_USCOREBool*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteSqlTransaction_USCOREBool*)p->ptr);
		break;
	case SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse:
		if (p->size < 0)
			SOAP_DELETE((_tempuri__ExecuteSqlTransaction_USCOREBoolResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_tempuri__ExecuteSqlTransaction_USCOREBoolResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DataSet:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DataSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DataSet*)p->ptr);
		break;
	case SOAP_TYPE_ns2__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE((ns2__ArrayOfstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns2__ArrayOfstring*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__Getstring:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__Getstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__Getstring*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteNonQuery:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__ExecuteNonQuery*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__ExecuteNonQuery*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREBool:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__ExecuteScalar_USCOREBool*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__ExecuteScalar_USCOREBool*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREString:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__ExecuteScalar_USCOREString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__ExecuteScalar_USCOREString*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteScalar_USCOREObject:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__ExecuteScalar_USCOREObject*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__ExecuteScalar_USCOREObject*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__DataAdapter:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__DataAdapter*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__DataAdapter*)p->ptr);
		break;
	case SOAP_TYPE___tempuri__ExecuteSqlTransaction_USCOREBool:
		if (p->size < 0)
			SOAP_DELETE((struct __tempuri__ExecuteSqlTransaction_USCOREBool*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __tempuri__ExecuteSqlTransaction_USCOREBool*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _tempuri__DataAdapterResponse_DataAdapterResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_tempuri__DataAdapterResponse_DataAdapterResult::xsd__schema);
	this->_tempuri__DataAdapterResponse_DataAdapterResult::__any = NULL;
}

void _tempuri__DataAdapterResponse_DataAdapterResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_tempuri__DataAdapterResponse_DataAdapterResult::xsd__schema);
}

int _tempuri__DataAdapterResponse_DataAdapterResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__DataAdapterResponse_DataAdapterResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, const char *tag, int id, const _tempuri__DataAdapterResponse_DataAdapterResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult), type))
		return soap->error;
	if (a->_tempuri__DataAdapterResponse_DataAdapterResult::xsd__schema)
	{	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &a->_tempuri__DataAdapterResponse_DataAdapterResult::xsd__schema, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "xsd:schema"))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_tempuri__DataAdapterResponse_DataAdapterResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_tempuri__DataAdapterResponse_DataAdapterResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__DataAdapterResponse_DataAdapterResult(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse_DataAdapterResult * SOAP_FMAC4 soap_in__tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, const char *tag, _tempuri__DataAdapterResponse_DataAdapterResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__DataAdapterResponse_DataAdapterResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult, sizeof(_tempuri__DataAdapterResponse_DataAdapterResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__DataAdapterResponse_DataAdapterResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_tempuri__DataAdapterResponse_DataAdapterResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_tempuri__DataAdapterResponse_DataAdapterResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__DataAdapterResponse_DataAdapterResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult, 0, sizeof(_tempuri__DataAdapterResponse_DataAdapterResult), 0, soap_copy__tempuri__DataAdapterResponse_DataAdapterResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _tempuri__DataAdapterResponse_DataAdapterResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult);
	if (this->soap_out(soap, tag?tag:"tempuri:DataAdapterResponse-DataAdapterResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__DataAdapterResponse_DataAdapterResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__DataAdapterResponse_DataAdapterResult(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse_DataAdapterResult * SOAP_FMAC4 soap_get__tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, _tempuri__DataAdapterResponse_DataAdapterResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__DataAdapterResponse_DataAdapterResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__DataAdapterResponse_DataAdapterResult * SOAP_FMAC2 soap_instantiate__tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__DataAdapterResponse_DataAdapterResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__DataAdapterResponse_DataAdapterResult);
		if (size)
			*size = sizeof(_tempuri__DataAdapterResponse_DataAdapterResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__DataAdapterResponse_DataAdapterResult[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__DataAdapterResponse_DataAdapterResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__DataAdapterResponse_DataAdapterResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__DataAdapterResponse_DataAdapterResult %p -> %p\n", q, p));
	*(_tempuri__DataAdapterResponse_DataAdapterResult*)p = *(_tempuri__DataAdapterResponse_DataAdapterResult*)q;
}

void ns2__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns2__ArrayOfstring::string);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns2__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns2__ArrayOfstring::string);
	/* transient soap skipped */
}

int ns2__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfstring(struct soap *soap, const char *tag, int id, const ns2__ArrayOfstring *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ArrayOfstring), "ns2:ArrayOfstring"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns2:string", -1, &(a->ns2__ArrayOfstring::string), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 ns2__ArrayOfstring * SOAP_FMAC4 soap_in_ns2__ArrayOfstring(struct soap *soap, const char *tag, ns2__ArrayOfstring *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__ArrayOfstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ArrayOfstring, sizeof(ns2__ArrayOfstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns2__ArrayOfstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns2__ArrayOfstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ns2:string", &(a->ns2__ArrayOfstring::string), "xsd:string"))
					continue;
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ArrayOfstring, 0, sizeof(ns2__ArrayOfstring), 0, soap_copy_ns2__ArrayOfstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns2__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns2__ArrayOfstring);
	if (this->soap_out(soap, tag?tag:"ns2:ArrayOfstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 ns2__ArrayOfstring * SOAP_FMAC4 soap_get_ns2__ArrayOfstring(struct soap *soap, ns2__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns2__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__ArrayOfstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__ArrayOfstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns2__ArrayOfstring);
		if (size)
			*size = sizeof(ns2__ArrayOfstring);
		((ns2__ArrayOfstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns2__ArrayOfstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns2__ArrayOfstring);
		for (int i = 0; i < n; i++)
			((ns2__ArrayOfstring*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns2__ArrayOfstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ArrayOfstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns2__ArrayOfstring %p -> %p\n", q, p));
	*(ns2__ArrayOfstring*)p = *(ns2__ArrayOfstring*)q;
}

void _ns1__DataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__xsd__schema(soap, &this->_ns1__DataSet::xsd__schema);
	this->_ns1__DataSet::__any = NULL;
	/* transient soap skipped */
}

void _ns1__DataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_ns1__DataSet::xsd__schema);
	/* transient soap skipped */
}

int _ns1__DataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataSet(struct soap *soap, const char *tag, int id, const _ns1__DataSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DataSet), type))
		return soap->error;
	if (a->_ns1__DataSet::xsd__schema)
	{	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &a->_ns1__DataSet::xsd__schema, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "xsd:schema"))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_ns1__DataSet::__any), NULL);
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DataSet(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_in__ns1__DataSet(struct soap *soap, const char *tag, _ns1__DataSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DataSet, sizeof(_ns1__DataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DataSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_ns1__DataSet::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_ns1__DataSet::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DataSet, 0, sizeof(_ns1__DataSet), 0, soap_copy__ns1__DataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DataSet);
	if (this->soap_out(soap, tag?tag:"ns1:DataSet", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DataSet(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_get__ns1__DataSet(struct soap *soap, _ns1__DataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DataSet * SOAP_FMAC2 soap_instantiate__ns1__DataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DataSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DataSet);
		if (size)
			*size = sizeof(_ns1__DataSet);
		((_ns1__DataSet*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DataSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DataSet);
		for (int i = 0; i < n; i++)
			((_ns1__DataSet*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DataSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DataSet %p -> %p\n", q, p));
	*(_ns1__DataSet*)p = *(_ns1__DataSet*)q;
}

void _tempuri__ExecuteSqlTransaction_USCOREBoolResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteSqlTransaction_USCOREBoolResponse::ExecuteSqlTransaction_USCOREBoolResult = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteSqlTransaction_USCOREBoolResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTobool(soap, &this->_tempuri__ExecuteSqlTransaction_USCOREBoolResponse::ExecuteSqlTransaction_USCOREBoolResult);
	/* transient soap skipped */
}

int _tempuri__ExecuteSqlTransaction_USCOREBoolResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteSqlTransaction_USCOREBoolResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse), type))
		return soap->error;
	if (a->ExecuteSqlTransaction_USCOREBoolResult)
		soap_element_result(soap, "tempuri:ExecuteSqlTransaction_BoolResult");
	if (soap_out_PointerTobool(soap, "tempuri:ExecuteSqlTransaction_BoolResult", -1, &(a->_tempuri__ExecuteSqlTransaction_USCOREBoolResponse::ExecuteSqlTransaction_USCOREBoolResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteSqlTransaction_USCOREBoolResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBoolResponse * SOAP_FMAC4 soap_in__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, const char *tag, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExecuteSqlTransaction_USCOREBoolResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExecuteSqlTransaction_USCOREBoolResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "tempuri:ExecuteSqlTransaction_BoolResult", &(a->_tempuri__ExecuteSqlTransaction_USCOREBoolResponse::ExecuteSqlTransaction_USCOREBoolResult), "xsd:boolean"))
				{	soap_flag_ExecuteSqlTransaction_USCOREBoolResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:ExecuteSqlTransaction_BoolResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse, 0, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse), 0, soap_copy__tempuri__ExecuteSqlTransaction_USCOREBoolResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteSqlTransaction_USCOREBoolResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteSqlTransaction_BoolResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteSqlTransaction_USCOREBoolResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBoolResponse * SOAP_FMAC4 soap_get__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteSqlTransaction_USCOREBoolResponse * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse);
		if (size)
			*size = sizeof(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse);
		((_tempuri__ExecuteSqlTransaction_USCOREBoolResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteSqlTransaction_USCOREBoolResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteSqlTransaction_USCOREBoolResponse %p -> %p\n", q, p));
	*(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse*)p = *(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse*)q;
}

void _tempuri__ExecuteSqlTransaction_USCOREBool::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteSqlTransaction_USCOREBool::transactionName = NULL;
	this->_tempuri__ExecuteSqlTransaction_USCOREBool::cmdTextArray = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteSqlTransaction_USCOREBool::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__ExecuteSqlTransaction_USCOREBool::transactionName);
	soap_serialize_PointerTons2__ArrayOfstring(soap, &this->_tempuri__ExecuteSqlTransaction_USCOREBool::cmdTextArray);
	/* transient soap skipped */
}

int _tempuri__ExecuteSqlTransaction_USCOREBool::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteSqlTransaction_USCOREBool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:transactionName", -1, &(a->_tempuri__ExecuteSqlTransaction_USCOREBool::transactionName), ""))
		return soap->error;
	if (soap_out_PointerTons2__ArrayOfstring(soap, "tempuri:cmdTextArray", -1, &(a->_tempuri__ExecuteSqlTransaction_USCOREBool::cmdTextArray), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteSqlTransaction_USCOREBool::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBool * SOAP_FMAC4 soap_in__tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const char *tag, _tempuri__ExecuteSqlTransaction_USCOREBool *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteSqlTransaction_USCOREBool *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBool), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteSqlTransaction_USCOREBool *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_transactionName1 = 1;
	size_t soap_flag_cmdTextArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_transactionName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:transactionName", &(a->_tempuri__ExecuteSqlTransaction_USCOREBool::transactionName), "xsd:string"))
				{	soap_flag_transactionName1--;
					continue;
				}
			if (soap_flag_cmdTextArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons2__ArrayOfstring(soap, "tempuri:cmdTextArray", &(a->_tempuri__ExecuteSqlTransaction_USCOREBool::cmdTextArray), "ns2:ArrayOfstring"))
				{	soap_flag_cmdTextArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteSqlTransaction_USCOREBool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool, 0, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBool), 0, soap_copy__tempuri__ExecuteSqlTransaction_USCOREBool);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteSqlTransaction_USCOREBool::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteSqlTransaction_Bool", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteSqlTransaction_USCOREBool::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteSqlTransaction_USCOREBool(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBool * SOAP_FMAC4 soap_get__tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBool *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteSqlTransaction_USCOREBool * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBool(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteSqlTransaction_USCOREBool);
		if (size)
			*size = sizeof(_tempuri__ExecuteSqlTransaction_USCOREBool);
		((_tempuri__ExecuteSqlTransaction_USCOREBool*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteSqlTransaction_USCOREBool[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteSqlTransaction_USCOREBool);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteSqlTransaction_USCOREBool*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteSqlTransaction_USCOREBool*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteSqlTransaction_USCOREBool %p -> %p\n", q, p));
	*(_tempuri__ExecuteSqlTransaction_USCOREBool*)p = *(_tempuri__ExecuteSqlTransaction_USCOREBool*)q;
}

void _tempuri__DataAdapterResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__DataAdapterResponse::DataAdapterResult = NULL;
	/* transient soap skipped */
}

void _tempuri__DataAdapterResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, &this->_tempuri__DataAdapterResponse::DataAdapterResult);
	/* transient soap skipped */
}

int _tempuri__DataAdapterResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__DataAdapterResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DataAdapterResponse(struct soap *soap, const char *tag, int id, const _tempuri__DataAdapterResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__DataAdapterResponse), type))
		return soap->error;
	if (a->DataAdapterResult)
		soap_element_result(soap, "tempuri:DataAdapterResult");
	if (soap_out_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, "tempuri:DataAdapterResult", -1, &(a->_tempuri__DataAdapterResponse::DataAdapterResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__DataAdapterResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__DataAdapterResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse * SOAP_FMAC4 soap_in__tempuri__DataAdapterResponse(struct soap *soap, const char *tag, _tempuri__DataAdapterResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__DataAdapterResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__DataAdapterResponse, sizeof(_tempuri__DataAdapterResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__DataAdapterResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__DataAdapterResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DataAdapterResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DataAdapterResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, "tempuri:DataAdapterResult", &(a->_tempuri__DataAdapterResponse::DataAdapterResult), ""))
				{	soap_flag_DataAdapterResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:DataAdapterResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__DataAdapterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__DataAdapterResponse, 0, sizeof(_tempuri__DataAdapterResponse), 0, soap_copy__tempuri__DataAdapterResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__DataAdapterResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__DataAdapterResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:DataAdapterResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__DataAdapterResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__DataAdapterResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse * SOAP_FMAC4 soap_get__tempuri__DataAdapterResponse(struct soap *soap, _tempuri__DataAdapterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__DataAdapterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__DataAdapterResponse * SOAP_FMAC2 soap_instantiate__tempuri__DataAdapterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__DataAdapterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__DataAdapterResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__DataAdapterResponse);
		if (size)
			*size = sizeof(_tempuri__DataAdapterResponse);
		((_tempuri__DataAdapterResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__DataAdapterResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__DataAdapterResponse);
		for (int i = 0; i < n; i++)
			((_tempuri__DataAdapterResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__DataAdapterResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__DataAdapterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__DataAdapterResponse %p -> %p\n", q, p));
	*(_tempuri__DataAdapterResponse*)p = *(_tempuri__DataAdapterResponse*)q;
}

void _tempuri__DataAdapter::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__DataAdapter::SqlTxt = NULL;
	/* transient soap skipped */
}

void _tempuri__DataAdapter::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__DataAdapter::SqlTxt);
	/* transient soap skipped */
}

int _tempuri__DataAdapter::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__DataAdapter(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__DataAdapter(struct soap *soap, const char *tag, int id, const _tempuri__DataAdapter *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__DataAdapter), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:SqlTxt", -1, &(a->_tempuri__DataAdapter::SqlTxt), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__DataAdapter::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__DataAdapter(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__DataAdapter * SOAP_FMAC4 soap_in__tempuri__DataAdapter(struct soap *soap, const char *tag, _tempuri__DataAdapter *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__DataAdapter *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__DataAdapter, sizeof(_tempuri__DataAdapter), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__DataAdapter)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__DataAdapter *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SqlTxt1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SqlTxt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:SqlTxt", &(a->_tempuri__DataAdapter::SqlTxt), "xsd:string"))
				{	soap_flag_SqlTxt1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__DataAdapter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__DataAdapter, 0, sizeof(_tempuri__DataAdapter), 0, soap_copy__tempuri__DataAdapter);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__DataAdapter::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__DataAdapter);
	if (this->soap_out(soap, tag?tag:"tempuri:DataAdapter", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__DataAdapter::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__DataAdapter(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__DataAdapter * SOAP_FMAC4 soap_get__tempuri__DataAdapter(struct soap *soap, _tempuri__DataAdapter *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__DataAdapter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__DataAdapter * SOAP_FMAC2 soap_instantiate__tempuri__DataAdapter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__DataAdapter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__DataAdapter, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__DataAdapter);
		if (size)
			*size = sizeof(_tempuri__DataAdapter);
		((_tempuri__DataAdapter*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__DataAdapter[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__DataAdapter);
		for (int i = 0; i < n; i++)
			((_tempuri__DataAdapter*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__DataAdapter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__DataAdapter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__DataAdapter %p -> %p\n", q, p));
	*(_tempuri__DataAdapter*)p = *(_tempuri__DataAdapter*)q;
}

void _tempuri__ExecuteScalar_USCOREObjectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteScalar_USCOREObjectResponse::ExecuteScalar_USCOREObjectResult = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteScalar_USCOREObjectResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__anyType(soap, &this->_tempuri__ExecuteScalar_USCOREObjectResponse::ExecuteScalar_USCOREObjectResult);
	/* transient soap skipped */
}

int _tempuri__ExecuteScalar_USCOREObjectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteScalar_USCOREObjectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteScalar_USCOREObjectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse), type))
		return soap->error;
	if (a->ExecuteScalar_USCOREObjectResult)
		soap_element_result(soap, "tempuri:ExecuteScalar_ObjectResult");
	if (soap_out_PointerToxsd__anyType(soap, "tempuri:ExecuteScalar_ObjectResult", -1, &(a->_tempuri__ExecuteScalar_USCOREObjectResponse::ExecuteScalar_USCOREObjectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteScalar_USCOREObjectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteScalar_USCOREObjectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObjectResponse * SOAP_FMAC4 soap_in__tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREObjectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteScalar_USCOREObjectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse, sizeof(_tempuri__ExecuteScalar_USCOREObjectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteScalar_USCOREObjectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExecuteScalar_USCOREObjectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExecuteScalar_USCOREObjectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__anyType(soap, "tempuri:ExecuteScalar_ObjectResult", &(a->_tempuri__ExecuteScalar_USCOREObjectResponse::ExecuteScalar_USCOREObjectResult), "xsd:anyType"))
				{	soap_flag_ExecuteScalar_USCOREObjectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:ExecuteScalar_ObjectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteScalar_USCOREObjectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse, 0, sizeof(_tempuri__ExecuteScalar_USCOREObjectResponse), 0, soap_copy__tempuri__ExecuteScalar_USCOREObjectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteScalar_USCOREObjectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteScalar_ObjectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteScalar_USCOREObjectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteScalar_USCOREObjectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObjectResponse * SOAP_FMAC4 soap_get__tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREObjectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteScalar_USCOREObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteScalar_USCOREObjectResponse * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteScalar_USCOREObjectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREObjectResponse);
		if (size)
			*size = sizeof(_tempuri__ExecuteScalar_USCOREObjectResponse);
		((_tempuri__ExecuteScalar_USCOREObjectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREObjectResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteScalar_USCOREObjectResponse);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteScalar_USCOREObjectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteScalar_USCOREObjectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteScalar_USCOREObjectResponse %p -> %p\n", q, p));
	*(_tempuri__ExecuteScalar_USCOREObjectResponse*)p = *(_tempuri__ExecuteScalar_USCOREObjectResponse*)q;
}

void _tempuri__ExecuteScalar_USCOREObject::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteScalar_USCOREObject::SqlTxt = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteScalar_USCOREObject::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__ExecuteScalar_USCOREObject::SqlTxt);
	/* transient soap skipped */
}

int _tempuri__ExecuteScalar_USCOREObject::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteScalar_USCOREObject(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteScalar_USCOREObject *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:SqlTxt", -1, &(a->_tempuri__ExecuteScalar_USCOREObject::SqlTxt), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteScalar_USCOREObject::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteScalar_USCOREObject(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObject * SOAP_FMAC4 soap_in__tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREObject *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteScalar_USCOREObject *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject, sizeof(_tempuri__ExecuteScalar_USCOREObject), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteScalar_USCOREObject *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SqlTxt1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SqlTxt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:SqlTxt", &(a->_tempuri__ExecuteScalar_USCOREObject::SqlTxt), "xsd:string"))
				{	soap_flag_SqlTxt1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteScalar_USCOREObject *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject, 0, sizeof(_tempuri__ExecuteScalar_USCOREObject), 0, soap_copy__tempuri__ExecuteScalar_USCOREObject);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteScalar_USCOREObject::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteScalar_Object", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteScalar_USCOREObject::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteScalar_USCOREObject(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObject * SOAP_FMAC4 soap_get__tempuri__ExecuteScalar_USCOREObject(struct soap *soap, _tempuri__ExecuteScalar_USCOREObject *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteScalar_USCOREObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteScalar_USCOREObject * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteScalar_USCOREObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteScalar_USCOREObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREObject);
		if (size)
			*size = sizeof(_tempuri__ExecuteScalar_USCOREObject);
		((_tempuri__ExecuteScalar_USCOREObject*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREObject[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteScalar_USCOREObject);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteScalar_USCOREObject*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteScalar_USCOREObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteScalar_USCOREObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteScalar_USCOREObject %p -> %p\n", q, p));
	*(_tempuri__ExecuteScalar_USCOREObject*)p = *(_tempuri__ExecuteScalar_USCOREObject*)q;
}

void _tempuri__ExecuteScalar_USCOREStringResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteScalar_USCOREStringResponse::ExecuteScalar_USCOREStringResult = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteScalar_USCOREStringResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__ExecuteScalar_USCOREStringResponse::ExecuteScalar_USCOREStringResult);
	/* transient soap skipped */
}

int _tempuri__ExecuteScalar_USCOREStringResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteScalar_USCOREStringResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteScalar_USCOREStringResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse), type))
		return soap->error;
	if (a->ExecuteScalar_USCOREStringResult)
		soap_element_result(soap, "tempuri:ExecuteScalar_StringResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:ExecuteScalar_StringResult", -1, &(a->_tempuri__ExecuteScalar_USCOREStringResponse::ExecuteScalar_USCOREStringResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteScalar_USCOREStringResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteScalar_USCOREStringResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREStringResponse * SOAP_FMAC4 soap_in__tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREStringResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteScalar_USCOREStringResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse, sizeof(_tempuri__ExecuteScalar_USCOREStringResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteScalar_USCOREStringResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExecuteScalar_USCOREStringResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExecuteScalar_USCOREStringResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:ExecuteScalar_StringResult", &(a->_tempuri__ExecuteScalar_USCOREStringResponse::ExecuteScalar_USCOREStringResult), "xsd:string"))
				{	soap_flag_ExecuteScalar_USCOREStringResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:ExecuteScalar_StringResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteScalar_USCOREStringResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse, 0, sizeof(_tempuri__ExecuteScalar_USCOREStringResponse), 0, soap_copy__tempuri__ExecuteScalar_USCOREStringResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteScalar_USCOREStringResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteScalar_StringResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteScalar_USCOREStringResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteScalar_USCOREStringResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREStringResponse * SOAP_FMAC4 soap_get__tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteScalar_USCOREStringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteScalar_USCOREStringResponse * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteScalar_USCOREStringResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREStringResponse);
		if (size)
			*size = sizeof(_tempuri__ExecuteScalar_USCOREStringResponse);
		((_tempuri__ExecuteScalar_USCOREStringResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREStringResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteScalar_USCOREStringResponse);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteScalar_USCOREStringResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteScalar_USCOREStringResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteScalar_USCOREStringResponse %p -> %p\n", q, p));
	*(_tempuri__ExecuteScalar_USCOREStringResponse*)p = *(_tempuri__ExecuteScalar_USCOREStringResponse*)q;
}

void _tempuri__ExecuteScalar_USCOREString::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteScalar_USCOREString::SqlTxt = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteScalar_USCOREString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__ExecuteScalar_USCOREString::SqlTxt);
	/* transient soap skipped */
}

int _tempuri__ExecuteScalar_USCOREString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteScalar_USCOREString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteScalar_USCOREString(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteScalar_USCOREString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:SqlTxt", -1, &(a->_tempuri__ExecuteScalar_USCOREString::SqlTxt), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteScalar_USCOREString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteScalar_USCOREString(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREString * SOAP_FMAC4 soap_in__tempuri__ExecuteScalar_USCOREString(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteScalar_USCOREString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString, sizeof(_tempuri__ExecuteScalar_USCOREString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteScalar_USCOREString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteScalar_USCOREString *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SqlTxt1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SqlTxt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:SqlTxt", &(a->_tempuri__ExecuteScalar_USCOREString::SqlTxt), "xsd:string"))
				{	soap_flag_SqlTxt1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteScalar_USCOREString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString, 0, sizeof(_tempuri__ExecuteScalar_USCOREString), 0, soap_copy__tempuri__ExecuteScalar_USCOREString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteScalar_USCOREString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteScalar_String", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteScalar_USCOREString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteScalar_USCOREString(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREString * SOAP_FMAC4 soap_get__tempuri__ExecuteScalar_USCOREString(struct soap *soap, _tempuri__ExecuteScalar_USCOREString *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteScalar_USCOREString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteScalar_USCOREString * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteScalar_USCOREString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteScalar_USCOREString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREString);
		if (size)
			*size = sizeof(_tempuri__ExecuteScalar_USCOREString);
		((_tempuri__ExecuteScalar_USCOREString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteScalar_USCOREString);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteScalar_USCOREString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteScalar_USCOREString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteScalar_USCOREString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteScalar_USCOREString %p -> %p\n", q, p));
	*(_tempuri__ExecuteScalar_USCOREString*)p = *(_tempuri__ExecuteScalar_USCOREString*)q;
}

void _tempuri__ExecuteScalar_USCOREBoolResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteScalar_USCOREBoolResponse::ExecuteScalar_USCOREBoolResult = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteScalar_USCOREBoolResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTobool(soap, &this->_tempuri__ExecuteScalar_USCOREBoolResponse::ExecuteScalar_USCOREBoolResult);
	/* transient soap skipped */
}

int _tempuri__ExecuteScalar_USCOREBoolResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteScalar_USCOREBoolResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteScalar_USCOREBoolResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse), type))
		return soap->error;
	if (a->ExecuteScalar_USCOREBoolResult)
		soap_element_result(soap, "tempuri:ExecuteScalar_BoolResult");
	if (soap_out_PointerTobool(soap, "tempuri:ExecuteScalar_BoolResult", -1, &(a->_tempuri__ExecuteScalar_USCOREBoolResponse::ExecuteScalar_USCOREBoolResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteScalar_USCOREBoolResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteScalar_USCOREBoolResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBoolResponse * SOAP_FMAC4 soap_in__tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREBoolResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteScalar_USCOREBoolResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse, sizeof(_tempuri__ExecuteScalar_USCOREBoolResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteScalar_USCOREBoolResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExecuteScalar_USCOREBoolResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExecuteScalar_USCOREBoolResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "tempuri:ExecuteScalar_BoolResult", &(a->_tempuri__ExecuteScalar_USCOREBoolResponse::ExecuteScalar_USCOREBoolResult), "xsd:boolean"))
				{	soap_flag_ExecuteScalar_USCOREBoolResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:ExecuteScalar_BoolResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteScalar_USCOREBoolResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse, 0, sizeof(_tempuri__ExecuteScalar_USCOREBoolResponse), 0, soap_copy__tempuri__ExecuteScalar_USCOREBoolResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteScalar_USCOREBoolResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteScalar_BoolResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteScalar_USCOREBoolResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteScalar_USCOREBoolResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBoolResponse * SOAP_FMAC4 soap_get__tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREBoolResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteScalar_USCOREBoolResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteScalar_USCOREBoolResponse * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteScalar_USCOREBoolResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREBoolResponse);
		if (size)
			*size = sizeof(_tempuri__ExecuteScalar_USCOREBoolResponse);
		((_tempuri__ExecuteScalar_USCOREBoolResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREBoolResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteScalar_USCOREBoolResponse);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteScalar_USCOREBoolResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteScalar_USCOREBoolResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteScalar_USCOREBoolResponse %p -> %p\n", q, p));
	*(_tempuri__ExecuteScalar_USCOREBoolResponse*)p = *(_tempuri__ExecuteScalar_USCOREBoolResponse*)q;
}

void _tempuri__ExecuteScalar_USCOREBool::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteScalar_USCOREBool::SqlTxt = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteScalar_USCOREBool::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__ExecuteScalar_USCOREBool::SqlTxt);
	/* transient soap skipped */
}

int _tempuri__ExecuteScalar_USCOREBool::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteScalar_USCOREBool(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteScalar_USCOREBool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:SqlTxt", -1, &(a->_tempuri__ExecuteScalar_USCOREBool::SqlTxt), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteScalar_USCOREBool::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteScalar_USCOREBool(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBool * SOAP_FMAC4 soap_in__tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREBool *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteScalar_USCOREBool *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool, sizeof(_tempuri__ExecuteScalar_USCOREBool), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteScalar_USCOREBool *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SqlTxt1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SqlTxt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:SqlTxt", &(a->_tempuri__ExecuteScalar_USCOREBool::SqlTxt), "xsd:string"))
				{	soap_flag_SqlTxt1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteScalar_USCOREBool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool, 0, sizeof(_tempuri__ExecuteScalar_USCOREBool), 0, soap_copy__tempuri__ExecuteScalar_USCOREBool);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteScalar_USCOREBool::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteScalar_Bool", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteScalar_USCOREBool::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteScalar_USCOREBool(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBool * SOAP_FMAC4 soap_get__tempuri__ExecuteScalar_USCOREBool(struct soap *soap, _tempuri__ExecuteScalar_USCOREBool *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteScalar_USCOREBool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteScalar_USCOREBool * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteScalar_USCOREBool(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteScalar_USCOREBool(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREBool);
		if (size)
			*size = sizeof(_tempuri__ExecuteScalar_USCOREBool);
		((_tempuri__ExecuteScalar_USCOREBool*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteScalar_USCOREBool[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteScalar_USCOREBool);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteScalar_USCOREBool*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteScalar_USCOREBool*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteScalar_USCOREBool(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteScalar_USCOREBool %p -> %p\n", q, p));
	*(_tempuri__ExecuteScalar_USCOREBool*)p = *(_tempuri__ExecuteScalar_USCOREBool*)q;
}

void _tempuri__ExecuteNonQueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteNonQueryResponse::ExecuteNonQueryResult = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteNonQueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTobool(soap, &this->_tempuri__ExecuteNonQueryResponse::ExecuteNonQueryResult);
	/* transient soap skipped */
}

int _tempuri__ExecuteNonQueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteNonQueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteNonQueryResponse(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteNonQueryResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteNonQueryResponse), type))
		return soap->error;
	if (a->ExecuteNonQueryResult)
		soap_element_result(soap, "tempuri:ExecuteNonQueryResult");
	if (soap_out_PointerTobool(soap, "tempuri:ExecuteNonQueryResult", -1, &(a->_tempuri__ExecuteNonQueryResponse::ExecuteNonQueryResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteNonQueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteNonQueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteNonQueryResponse * SOAP_FMAC4 soap_in__tempuri__ExecuteNonQueryResponse(struct soap *soap, const char *tag, _tempuri__ExecuteNonQueryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteNonQueryResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteNonQueryResponse, sizeof(_tempuri__ExecuteNonQueryResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteNonQueryResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteNonQueryResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExecuteNonQueryResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExecuteNonQueryResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "tempuri:ExecuteNonQueryResult", &(a->_tempuri__ExecuteNonQueryResponse::ExecuteNonQueryResult), "xsd:boolean"))
				{	soap_flag_ExecuteNonQueryResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:ExecuteNonQueryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteNonQueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteNonQueryResponse, 0, sizeof(_tempuri__ExecuteNonQueryResponse), 0, soap_copy__tempuri__ExecuteNonQueryResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteNonQueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteNonQueryResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteNonQueryResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteNonQueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteNonQueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteNonQueryResponse * SOAP_FMAC4 soap_get__tempuri__ExecuteNonQueryResponse(struct soap *soap, _tempuri__ExecuteNonQueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteNonQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteNonQueryResponse * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteNonQueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteNonQueryResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteNonQueryResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteNonQueryResponse);
		if (size)
			*size = sizeof(_tempuri__ExecuteNonQueryResponse);
		((_tempuri__ExecuteNonQueryResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteNonQueryResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteNonQueryResponse);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteNonQueryResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteNonQueryResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteNonQueryResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteNonQueryResponse %p -> %p\n", q, p));
	*(_tempuri__ExecuteNonQueryResponse*)p = *(_tempuri__ExecuteNonQueryResponse*)q;
}

void _tempuri__ExecuteNonQuery::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__ExecuteNonQuery::SqlTxt = NULL;
	/* transient soap skipped */
}

void _tempuri__ExecuteNonQuery::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__ExecuteNonQuery::SqlTxt);
	/* transient soap skipped */
}

int _tempuri__ExecuteNonQuery::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__ExecuteNonQuery(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__ExecuteNonQuery(struct soap *soap, const char *tag, int id, const _tempuri__ExecuteNonQuery *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__ExecuteNonQuery), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:SqlTxt", -1, &(a->_tempuri__ExecuteNonQuery::SqlTxt), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__ExecuteNonQuery::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__ExecuteNonQuery(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__ExecuteNonQuery * SOAP_FMAC4 soap_in__tempuri__ExecuteNonQuery(struct soap *soap, const char *tag, _tempuri__ExecuteNonQuery *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__ExecuteNonQuery *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__ExecuteNonQuery, sizeof(_tempuri__ExecuteNonQuery), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__ExecuteNonQuery)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__ExecuteNonQuery *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SqlTxt1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SqlTxt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:SqlTxt", &(a->_tempuri__ExecuteNonQuery::SqlTxt), "xsd:string"))
				{	soap_flag_SqlTxt1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__ExecuteNonQuery *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__ExecuteNonQuery, 0, sizeof(_tempuri__ExecuteNonQuery), 0, soap_copy__tempuri__ExecuteNonQuery);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__ExecuteNonQuery::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__ExecuteNonQuery);
	if (this->soap_out(soap, tag?tag:"tempuri:ExecuteNonQuery", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__ExecuteNonQuery::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__ExecuteNonQuery(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__ExecuteNonQuery * SOAP_FMAC4 soap_get__tempuri__ExecuteNonQuery(struct soap *soap, _tempuri__ExecuteNonQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__ExecuteNonQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__ExecuteNonQuery * SOAP_FMAC2 soap_instantiate__tempuri__ExecuteNonQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__ExecuteNonQuery(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__ExecuteNonQuery, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteNonQuery);
		if (size)
			*size = sizeof(_tempuri__ExecuteNonQuery);
		((_tempuri__ExecuteNonQuery*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__ExecuteNonQuery[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__ExecuteNonQuery);
		for (int i = 0; i < n; i++)
			((_tempuri__ExecuteNonQuery*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__ExecuteNonQuery*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__ExecuteNonQuery(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__ExecuteNonQuery %p -> %p\n", q, p));
	*(_tempuri__ExecuteNonQuery*)p = *(_tempuri__ExecuteNonQuery*)q;
}

void _tempuri__GetstringResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__GetstringResponse::GetstringResult = NULL;
	/* transient soap skipped */
}

void _tempuri__GetstringResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__GetstringResponse::GetstringResult);
	/* transient soap skipped */
}

int _tempuri__GetstringResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__GetstringResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__GetstringResponse(struct soap *soap, const char *tag, int id, const _tempuri__GetstringResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__GetstringResponse), type))
		return soap->error;
	if (a->GetstringResult)
		soap_element_result(soap, "tempuri:GetstringResult");
	if (soap_out_PointerTostd__string(soap, "tempuri:GetstringResult", -1, &(a->_tempuri__GetstringResponse::GetstringResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__GetstringResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__GetstringResponse(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__GetstringResponse * SOAP_FMAC4 soap_in__tempuri__GetstringResponse(struct soap *soap, const char *tag, _tempuri__GetstringResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__GetstringResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__GetstringResponse, sizeof(_tempuri__GetstringResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__GetstringResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__GetstringResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetstringResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetstringResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:GetstringResult", &(a->_tempuri__GetstringResponse::GetstringResult), "xsd:string"))
				{	soap_flag_GetstringResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "tempuri:GetstringResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__GetstringResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__GetstringResponse, 0, sizeof(_tempuri__GetstringResponse), 0, soap_copy__tempuri__GetstringResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__GetstringResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__GetstringResponse);
	if (this->soap_out(soap, tag?tag:"tempuri:GetstringResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__GetstringResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__GetstringResponse(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__GetstringResponse * SOAP_FMAC4 soap_get__tempuri__GetstringResponse(struct soap *soap, _tempuri__GetstringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__GetstringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__GetstringResponse * SOAP_FMAC2 soap_instantiate__tempuri__GetstringResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__GetstringResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__GetstringResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__GetstringResponse);
		if (size)
			*size = sizeof(_tempuri__GetstringResponse);
		((_tempuri__GetstringResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__GetstringResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__GetstringResponse);
		for (int i = 0; i < n; i++)
			((_tempuri__GetstringResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__GetstringResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__GetstringResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__GetstringResponse %p -> %p\n", q, p));
	*(_tempuri__GetstringResponse*)p = *(_tempuri__GetstringResponse*)q;
}

void _tempuri__Getstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_tempuri__Getstring::InStr = NULL;
	/* transient soap skipped */
}

void _tempuri__Getstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_tempuri__Getstring::InStr);
	/* transient soap skipped */
}

int _tempuri__Getstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__tempuri__Getstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tempuri__Getstring(struct soap *soap, const char *tag, int id, const _tempuri__Getstring *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__tempuri__Getstring), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "tempuri:InStr", -1, &(a->_tempuri__Getstring::InStr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_tempuri__Getstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__tempuri__Getstring(soap, tag, this, type);
}

SOAP_FMAC3 _tempuri__Getstring * SOAP_FMAC4 soap_in__tempuri__Getstring(struct soap *soap, const char *tag, _tempuri__Getstring *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_tempuri__Getstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__tempuri__Getstring, sizeof(_tempuri__Getstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__tempuri__Getstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_tempuri__Getstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_InStr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_InStr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "tempuri:InStr", &(a->_tempuri__Getstring::InStr), "xsd:string"))
				{	soap_flag_InStr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_tempuri__Getstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__tempuri__Getstring, 0, sizeof(_tempuri__Getstring), 0, soap_copy__tempuri__Getstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _tempuri__Getstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__tempuri__Getstring);
	if (this->soap_out(soap, tag?tag:"tempuri:Getstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_tempuri__Getstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__tempuri__Getstring(soap, this, tag, type);
}

SOAP_FMAC3 _tempuri__Getstring * SOAP_FMAC4 soap_get__tempuri__Getstring(struct soap *soap, _tempuri__Getstring *p, const char *tag, const char *type)
{
	if ((p = soap_in__tempuri__Getstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _tempuri__Getstring * SOAP_FMAC2 soap_instantiate__tempuri__Getstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__tempuri__Getstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__tempuri__Getstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Getstring);
		if (size)
			*size = sizeof(_tempuri__Getstring);
		((_tempuri__Getstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_tempuri__Getstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_tempuri__Getstring);
		for (int i = 0; i < n; i++)
			((_tempuri__Getstring*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_tempuri__Getstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tempuri__Getstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _tempuri__Getstring %p -> %p\n", q, p));
	*(_tempuri__Getstring*)p = *(_tempuri__Getstring*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->xsd__string::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__string::__item, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->xsd__string::__item);
	/* transient soap skipped */
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	return soap_out_std__string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_std__string(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag?tag:"xsd:string", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__string);
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__string);
		for (int i = 0; i < n; i++)
			((xsd__string*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->xsd__boolean::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__boolean::__item, SOAP_TYPE_bool);
	/* transient soap skipped */
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__boolean)
			return (xsd__boolean *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))
		return NULL;
	return a;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (this->soap_out(soap, tag?tag:"xsd:boolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__boolean, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
		if (size)
			*size = sizeof(xsd__boolean);
		((xsd__boolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__boolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__boolean);
		for (int i = 0; i < n; i++)
			((xsd__boolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__boolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));
	*(xsd__boolean*)p = *(xsd__boolean*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:boolean"))
	{	cp->type = SOAP_TYPE_xsd__boolean;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__boolean);
			((xsd__boolean*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__boolean[n]);
			if (size)
				*size = n * sizeof(xsd__boolean);
			for (int i = 0; i < n; i++)
				((xsd__boolean*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__boolean*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__string);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__string[n]);
			if (size)
				*size = n * sizeof(xsd__string);
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns2:ArrayOfstring"))
	{	cp->type = SOAP_TYPE_ns2__ArrayOfstring;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns2__ArrayOfstring);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns2__ArrayOfstring);
			((ns2__ArrayOfstring*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns2__ArrayOfstring[n]);
			if (size)
				*size = n * sizeof(ns2__ArrayOfstring);
			for (int i = 0; i < n; i++)
				((ns2__ArrayOfstring*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns2__ArrayOfstring*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType);
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, struct __tempuri__ExecuteSqlTransaction_USCOREBool *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__ExecuteSqlTransaction_USCOREBool = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const struct __tempuri__ExecuteSqlTransaction_USCOREBool *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, &a->tempuri__ExecuteSqlTransaction_USCOREBool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const char *tag, int id, const struct __tempuri__ExecuteSqlTransaction_USCOREBool *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, "tempuri:ExecuteSqlTransaction_Bool", -1, &a->tempuri__ExecuteSqlTransaction_USCOREBool, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteSqlTransaction_USCOREBool * SOAP_FMAC4 soap_in___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const char *tag, struct __tempuri__ExecuteSqlTransaction_USCOREBool *a, const char *type)
{
	size_t soap_flag_tempuri__ExecuteSqlTransaction_USCOREBool = 1;
	short soap_flag;
	a = (struct __tempuri__ExecuteSqlTransaction_USCOREBool *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__ExecuteSqlTransaction_USCOREBool, sizeof(struct __tempuri__ExecuteSqlTransaction_USCOREBool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__ExecuteSqlTransaction_USCOREBool(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__ExecuteSqlTransaction_USCOREBool && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, "tempuri:ExecuteSqlTransaction_Bool", &a->tempuri__ExecuteSqlTransaction_USCOREBool, ""))
				{	soap_flag_tempuri__ExecuteSqlTransaction_USCOREBool--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const struct __tempuri__ExecuteSqlTransaction_USCOREBool *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag?tag:"-tempuri:ExecuteSqlTransaction_Bool", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteSqlTransaction_USCOREBool * SOAP_FMAC4 soap_get___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, struct __tempuri__ExecuteSqlTransaction_USCOREBool *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__ExecuteSqlTransaction_USCOREBool * SOAP_FMAC2 soap_instantiate___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__ExecuteSqlTransaction_USCOREBool(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__ExecuteSqlTransaction_USCOREBool, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteSqlTransaction_USCOREBool);
		if (size)
			*size = sizeof(struct __tempuri__ExecuteSqlTransaction_USCOREBool);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteSqlTransaction_USCOREBool[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tempuri__ExecuteSqlTransaction_USCOREBool);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tempuri__ExecuteSqlTransaction_USCOREBool*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__ExecuteSqlTransaction_USCOREBool %p -> %p\n", q, p));
	*(struct __tempuri__ExecuteSqlTransaction_USCOREBool*)p = *(struct __tempuri__ExecuteSqlTransaction_USCOREBool*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__DataAdapter(struct soap *soap, struct __tempuri__DataAdapter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__DataAdapter = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__DataAdapter(struct soap *soap, const struct __tempuri__DataAdapter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__DataAdapter(soap, &a->tempuri__DataAdapter);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__DataAdapter(struct soap *soap, const char *tag, int id, const struct __tempuri__DataAdapter *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__DataAdapter(soap, "tempuri:DataAdapter", -1, &a->tempuri__DataAdapter, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__DataAdapter * SOAP_FMAC4 soap_in___tempuri__DataAdapter(struct soap *soap, const char *tag, struct __tempuri__DataAdapter *a, const char *type)
{
	size_t soap_flag_tempuri__DataAdapter = 1;
	short soap_flag;
	a = (struct __tempuri__DataAdapter *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__DataAdapter, sizeof(struct __tempuri__DataAdapter), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__DataAdapter(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__DataAdapter && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__DataAdapter(soap, "tempuri:DataAdapter", &a->tempuri__DataAdapter, ""))
				{	soap_flag_tempuri__DataAdapter--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__DataAdapter(struct soap *soap, const struct __tempuri__DataAdapter *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__DataAdapter(soap, tag?tag:"-tempuri:DataAdapter", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__DataAdapter * SOAP_FMAC4 soap_get___tempuri__DataAdapter(struct soap *soap, struct __tempuri__DataAdapter *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__DataAdapter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__DataAdapter * SOAP_FMAC2 soap_instantiate___tempuri__DataAdapter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__DataAdapter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__DataAdapter, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__DataAdapter);
		if (size)
			*size = sizeof(struct __tempuri__DataAdapter);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__DataAdapter[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tempuri__DataAdapter);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tempuri__DataAdapter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__DataAdapter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__DataAdapter %p -> %p\n", q, p));
	*(struct __tempuri__DataAdapter*)p = *(struct __tempuri__DataAdapter*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, struct __tempuri__ExecuteScalar_USCOREObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__ExecuteScalar_USCOREObject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const struct __tempuri__ExecuteScalar_USCOREObject *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, &a->tempuri__ExecuteScalar_USCOREObject);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const char *tag, int id, const struct __tempuri__ExecuteScalar_USCOREObject *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, "tempuri:ExecuteScalar_Object", -1, &a->tempuri__ExecuteScalar_USCOREObject, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteScalar_USCOREObject * SOAP_FMAC4 soap_in___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const char *tag, struct __tempuri__ExecuteScalar_USCOREObject *a, const char *type)
{
	size_t soap_flag_tempuri__ExecuteScalar_USCOREObject = 1;
	short soap_flag;
	a = (struct __tempuri__ExecuteScalar_USCOREObject *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__ExecuteScalar_USCOREObject, sizeof(struct __tempuri__ExecuteScalar_USCOREObject), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__ExecuteScalar_USCOREObject(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__ExecuteScalar_USCOREObject && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, "tempuri:ExecuteScalar_Object", &a->tempuri__ExecuteScalar_USCOREObject, ""))
				{	soap_flag_tempuri__ExecuteScalar_USCOREObject--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const struct __tempuri__ExecuteScalar_USCOREObject *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__ExecuteScalar_USCOREObject(soap, tag?tag:"-tempuri:ExecuteScalar_Object", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteScalar_USCOREObject * SOAP_FMAC4 soap_get___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, struct __tempuri__ExecuteScalar_USCOREObject *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__ExecuteScalar_USCOREObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__ExecuteScalar_USCOREObject * SOAP_FMAC2 soap_instantiate___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__ExecuteScalar_USCOREObject(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__ExecuteScalar_USCOREObject, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteScalar_USCOREObject);
		if (size)
			*size = sizeof(struct __tempuri__ExecuteScalar_USCOREObject);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteScalar_USCOREObject[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tempuri__ExecuteScalar_USCOREObject);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tempuri__ExecuteScalar_USCOREObject*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__ExecuteScalar_USCOREObject(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__ExecuteScalar_USCOREObject %p -> %p\n", q, p));
	*(struct __tempuri__ExecuteScalar_USCOREObject*)p = *(struct __tempuri__ExecuteScalar_USCOREObject*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ExecuteScalar_USCOREString(struct soap *soap, struct __tempuri__ExecuteScalar_USCOREString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__ExecuteScalar_USCOREString = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ExecuteScalar_USCOREString(struct soap *soap, const struct __tempuri__ExecuteScalar_USCOREString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, &a->tempuri__ExecuteScalar_USCOREString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ExecuteScalar_USCOREString(struct soap *soap, const char *tag, int id, const struct __tempuri__ExecuteScalar_USCOREString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, "tempuri:ExecuteScalar_String", -1, &a->tempuri__ExecuteScalar_USCOREString, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteScalar_USCOREString * SOAP_FMAC4 soap_in___tempuri__ExecuteScalar_USCOREString(struct soap *soap, const char *tag, struct __tempuri__ExecuteScalar_USCOREString *a, const char *type)
{
	size_t soap_flag_tempuri__ExecuteScalar_USCOREString = 1;
	short soap_flag;
	a = (struct __tempuri__ExecuteScalar_USCOREString *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__ExecuteScalar_USCOREString, sizeof(struct __tempuri__ExecuteScalar_USCOREString), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__ExecuteScalar_USCOREString(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__ExecuteScalar_USCOREString && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, "tempuri:ExecuteScalar_String", &a->tempuri__ExecuteScalar_USCOREString, ""))
				{	soap_flag_tempuri__ExecuteScalar_USCOREString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ExecuteScalar_USCOREString(struct soap *soap, const struct __tempuri__ExecuteScalar_USCOREString *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__ExecuteScalar_USCOREString(soap, tag?tag:"-tempuri:ExecuteScalar_String", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteScalar_USCOREString * SOAP_FMAC4 soap_get___tempuri__ExecuteScalar_USCOREString(struct soap *soap, struct __tempuri__ExecuteScalar_USCOREString *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__ExecuteScalar_USCOREString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__ExecuteScalar_USCOREString * SOAP_FMAC2 soap_instantiate___tempuri__ExecuteScalar_USCOREString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__ExecuteScalar_USCOREString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__ExecuteScalar_USCOREString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteScalar_USCOREString);
		if (size)
			*size = sizeof(struct __tempuri__ExecuteScalar_USCOREString);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteScalar_USCOREString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tempuri__ExecuteScalar_USCOREString);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tempuri__ExecuteScalar_USCOREString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__ExecuteScalar_USCOREString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__ExecuteScalar_USCOREString %p -> %p\n", q, p));
	*(struct __tempuri__ExecuteScalar_USCOREString*)p = *(struct __tempuri__ExecuteScalar_USCOREString*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, struct __tempuri__ExecuteScalar_USCOREBool *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__ExecuteScalar_USCOREBool = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const struct __tempuri__ExecuteScalar_USCOREBool *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, &a->tempuri__ExecuteScalar_USCOREBool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const char *tag, int id, const struct __tempuri__ExecuteScalar_USCOREBool *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, "tempuri:ExecuteScalar_Bool", -1, &a->tempuri__ExecuteScalar_USCOREBool, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteScalar_USCOREBool * SOAP_FMAC4 soap_in___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const char *tag, struct __tempuri__ExecuteScalar_USCOREBool *a, const char *type)
{
	size_t soap_flag_tempuri__ExecuteScalar_USCOREBool = 1;
	short soap_flag;
	a = (struct __tempuri__ExecuteScalar_USCOREBool *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__ExecuteScalar_USCOREBool, sizeof(struct __tempuri__ExecuteScalar_USCOREBool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__ExecuteScalar_USCOREBool(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__ExecuteScalar_USCOREBool && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, "tempuri:ExecuteScalar_Bool", &a->tempuri__ExecuteScalar_USCOREBool, ""))
				{	soap_flag_tempuri__ExecuteScalar_USCOREBool--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const struct __tempuri__ExecuteScalar_USCOREBool *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__ExecuteScalar_USCOREBool(soap, tag?tag:"-tempuri:ExecuteScalar_Bool", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteScalar_USCOREBool * SOAP_FMAC4 soap_get___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, struct __tempuri__ExecuteScalar_USCOREBool *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__ExecuteScalar_USCOREBool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__ExecuteScalar_USCOREBool * SOAP_FMAC2 soap_instantiate___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__ExecuteScalar_USCOREBool(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__ExecuteScalar_USCOREBool, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteScalar_USCOREBool);
		if (size)
			*size = sizeof(struct __tempuri__ExecuteScalar_USCOREBool);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteScalar_USCOREBool[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tempuri__ExecuteScalar_USCOREBool);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tempuri__ExecuteScalar_USCOREBool*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__ExecuteScalar_USCOREBool(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__ExecuteScalar_USCOREBool %p -> %p\n", q, p));
	*(struct __tempuri__ExecuteScalar_USCOREBool*)p = *(struct __tempuri__ExecuteScalar_USCOREBool*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__ExecuteNonQuery(struct soap *soap, struct __tempuri__ExecuteNonQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__ExecuteNonQuery = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__ExecuteNonQuery(struct soap *soap, const struct __tempuri__ExecuteNonQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__ExecuteNonQuery(soap, &a->tempuri__ExecuteNonQuery);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__ExecuteNonQuery(struct soap *soap, const char *tag, int id, const struct __tempuri__ExecuteNonQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__ExecuteNonQuery(soap, "tempuri:ExecuteNonQuery", -1, &a->tempuri__ExecuteNonQuery, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteNonQuery * SOAP_FMAC4 soap_in___tempuri__ExecuteNonQuery(struct soap *soap, const char *tag, struct __tempuri__ExecuteNonQuery *a, const char *type)
{
	size_t soap_flag_tempuri__ExecuteNonQuery = 1;
	short soap_flag;
	a = (struct __tempuri__ExecuteNonQuery *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__ExecuteNonQuery, sizeof(struct __tempuri__ExecuteNonQuery), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__ExecuteNonQuery(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__ExecuteNonQuery && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__ExecuteNonQuery(soap, "tempuri:ExecuteNonQuery", &a->tempuri__ExecuteNonQuery, ""))
				{	soap_flag_tempuri__ExecuteNonQuery--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__ExecuteNonQuery(struct soap *soap, const struct __tempuri__ExecuteNonQuery *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__ExecuteNonQuery(soap, tag?tag:"-tempuri:ExecuteNonQuery", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__ExecuteNonQuery * SOAP_FMAC4 soap_get___tempuri__ExecuteNonQuery(struct soap *soap, struct __tempuri__ExecuteNonQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__ExecuteNonQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__ExecuteNonQuery * SOAP_FMAC2 soap_instantiate___tempuri__ExecuteNonQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__ExecuteNonQuery(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__ExecuteNonQuery, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteNonQuery);
		if (size)
			*size = sizeof(struct __tempuri__ExecuteNonQuery);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__ExecuteNonQuery[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tempuri__ExecuteNonQuery);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tempuri__ExecuteNonQuery*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__ExecuteNonQuery(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__ExecuteNonQuery %p -> %p\n", q, p));
	*(struct __tempuri__ExecuteNonQuery*)p = *(struct __tempuri__ExecuteNonQuery*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Getstring(struct soap *soap, struct __tempuri__Getstring *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tempuri__Getstring = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Getstring(struct soap *soap, const struct __tempuri__Getstring *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_tempuri__Getstring(soap, &a->tempuri__Getstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Getstring(struct soap *soap, const char *tag, int id, const struct __tempuri__Getstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_tempuri__Getstring(soap, "tempuri:Getstring", -1, &a->tempuri__Getstring, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Getstring * SOAP_FMAC4 soap_in___tempuri__Getstring(struct soap *soap, const char *tag, struct __tempuri__Getstring *a, const char *type)
{
	size_t soap_flag_tempuri__Getstring = 1;
	short soap_flag;
	a = (struct __tempuri__Getstring *)soap_id_enter(soap, "", a, SOAP_TYPE___tempuri__Getstring, sizeof(struct __tempuri__Getstring), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___tempuri__Getstring(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tempuri__Getstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_tempuri__Getstring(soap, "tempuri:Getstring", &a->tempuri__Getstring, ""))
				{	soap_flag_tempuri__Getstring--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Getstring(struct soap *soap, const struct __tempuri__Getstring *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___tempuri__Getstring(soap, tag?tag:"-tempuri:Getstring", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __tempuri__Getstring * SOAP_FMAC4 soap_get___tempuri__Getstring(struct soap *soap, struct __tempuri__Getstring *p, const char *tag, const char *type)
{
	if ((p = soap_in___tempuri__Getstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __tempuri__Getstring * SOAP_FMAC2 soap_instantiate___tempuri__Getstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___tempuri__Getstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___tempuri__Getstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Getstring);
		if (size)
			*size = sizeof(struct __tempuri__Getstring);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __tempuri__Getstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __tempuri__Getstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __tempuri__Getstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Getstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __tempuri__Getstring %p -> %p\n", q, p));
	*(struct __tempuri__Getstring*)p = *(struct __tempuri__Getstring*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct SOAP_ENV__Reason *)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, *a);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct SOAP_ENV__Detail *)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, *a);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		*a = (struct SOAP_ENV__Code *)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, *a);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, const char *tag, int id, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBoolResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, const char *tag, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse **)soap_malloc(soap, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse *)soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteSqlTransaction_USCOREBoolResponse ** p = (_tempuri__ExecuteSqlTransaction_USCOREBoolResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBoolResponse, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBoolResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse);
	if (soap_out_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, tag?tag:"tempuri:ExecuteSqlTransaction_BoolResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBoolResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBoolResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBool *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const char *tag, int id, _tempuri__ExecuteSqlTransaction_USCOREBool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBool ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, const char *tag, _tempuri__ExecuteSqlTransaction_USCOREBool **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteSqlTransaction_USCOREBool **)soap_malloc(soap, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteSqlTransaction_USCOREBool *)soap_instantiate__tempuri__ExecuteSqlTransaction_USCOREBool(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteSqlTransaction_USCOREBool ** p = (_tempuri__ExecuteSqlTransaction_USCOREBool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteSqlTransaction_USCOREBool, sizeof(_tempuri__ExecuteSqlTransaction_USCOREBool), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBool *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool);
	if (soap_out_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag?tag:"tempuri:ExecuteSqlTransaction_Bool", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteSqlTransaction_USCOREBool ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(struct soap *soap, _tempuri__ExecuteSqlTransaction_USCOREBool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteSqlTransaction_USCOREBool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__DataAdapterResponse(struct soap *soap, _tempuri__DataAdapterResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__DataAdapterResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__DataAdapterResponse(struct soap *soap, const char *tag, int id, _tempuri__DataAdapterResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__DataAdapterResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__DataAdapterResponse(struct soap *soap, const char *tag, _tempuri__DataAdapterResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__DataAdapterResponse **)soap_malloc(soap, sizeof(_tempuri__DataAdapterResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__DataAdapterResponse *)soap_instantiate__tempuri__DataAdapterResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__DataAdapterResponse ** p = (_tempuri__DataAdapterResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__DataAdapterResponse, sizeof(_tempuri__DataAdapterResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__DataAdapterResponse(struct soap *soap, _tempuri__DataAdapterResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse);
	if (soap_out_PointerTo_tempuri__DataAdapterResponse(soap, tag?tag:"tempuri:DataAdapterResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__DataAdapterResponse(struct soap *soap, _tempuri__DataAdapterResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__DataAdapterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__DataAdapter(struct soap *soap, _tempuri__DataAdapter *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__DataAdapter))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__DataAdapter(struct soap *soap, const char *tag, int id, _tempuri__DataAdapter *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__DataAdapter);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__DataAdapter ** SOAP_FMAC4 soap_in_PointerTo_tempuri__DataAdapter(struct soap *soap, const char *tag, _tempuri__DataAdapter **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__DataAdapter **)soap_malloc(soap, sizeof(_tempuri__DataAdapter *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__DataAdapter *)soap_instantiate__tempuri__DataAdapter(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__DataAdapter ** p = (_tempuri__DataAdapter **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__DataAdapter, sizeof(_tempuri__DataAdapter), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__DataAdapter(struct soap *soap, _tempuri__DataAdapter *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__DataAdapter);
	if (soap_out_PointerTo_tempuri__DataAdapter(soap, tag?tag:"tempuri:DataAdapter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__DataAdapter ** SOAP_FMAC4 soap_get_PointerTo_tempuri__DataAdapter(struct soap *soap, _tempuri__DataAdapter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__DataAdapter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREObjectResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, const char *tag, int id, _tempuri__ExecuteScalar_USCOREObjectResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObjectResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREObjectResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteScalar_USCOREObjectResponse **)soap_malloc(soap, sizeof(_tempuri__ExecuteScalar_USCOREObjectResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteScalar_USCOREObjectResponse *)soap_instantiate__tempuri__ExecuteScalar_USCOREObjectResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteScalar_USCOREObjectResponse ** p = (_tempuri__ExecuteScalar_USCOREObjectResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObjectResponse, sizeof(_tempuri__ExecuteScalar_USCOREObjectResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREObjectResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse);
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(soap, tag?tag:"tempuri:ExecuteScalar_ObjectResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObjectResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREObjectResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteScalar_USCOREObjectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREObject(struct soap *soap, _tempuri__ExecuteScalar_USCOREObject *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const char *tag, int id, _tempuri__ExecuteScalar_USCOREObject *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObject ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteScalar_USCOREObject(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREObject **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteScalar_USCOREObject **)soap_malloc(soap, sizeof(_tempuri__ExecuteScalar_USCOREObject *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteScalar_USCOREObject *)soap_instantiate__tempuri__ExecuteScalar_USCOREObject(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteScalar_USCOREObject ** p = (_tempuri__ExecuteScalar_USCOREObject **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREObject, sizeof(_tempuri__ExecuteScalar_USCOREObject), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteScalar_USCOREObject(struct soap *soap, _tempuri__ExecuteScalar_USCOREObject *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREObject);
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, tag?tag:"tempuri:ExecuteScalar_Object", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREObject ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteScalar_USCOREObject(struct soap *soap, _tempuri__ExecuteScalar_USCOREObject **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteScalar_USCOREObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREStringResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, const char *tag, int id, _tempuri__ExecuteScalar_USCOREStringResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREStringResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREStringResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteScalar_USCOREStringResponse **)soap_malloc(soap, sizeof(_tempuri__ExecuteScalar_USCOREStringResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteScalar_USCOREStringResponse *)soap_instantiate__tempuri__ExecuteScalar_USCOREStringResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteScalar_USCOREStringResponse ** p = (_tempuri__ExecuteScalar_USCOREStringResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREStringResponse, sizeof(_tempuri__ExecuteScalar_USCOREStringResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREStringResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse);
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(soap, tag?tag:"tempuri:ExecuteScalar_StringResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREStringResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREStringResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteScalar_USCOREStringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREString(struct soap *soap, _tempuri__ExecuteScalar_USCOREString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteScalar_USCOREString(struct soap *soap, const char *tag, int id, _tempuri__ExecuteScalar_USCOREString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREString ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteScalar_USCOREString(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteScalar_USCOREString **)soap_malloc(soap, sizeof(_tempuri__ExecuteScalar_USCOREString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteScalar_USCOREString *)soap_instantiate__tempuri__ExecuteScalar_USCOREString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteScalar_USCOREString ** p = (_tempuri__ExecuteScalar_USCOREString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREString, sizeof(_tempuri__ExecuteScalar_USCOREString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteScalar_USCOREString(struct soap *soap, _tempuri__ExecuteScalar_USCOREString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREString);
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, tag?tag:"tempuri:ExecuteScalar_String", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREString ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteScalar_USCOREString(struct soap *soap, _tempuri__ExecuteScalar_USCOREString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteScalar_USCOREString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREBoolResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, const char *tag, int id, _tempuri__ExecuteScalar_USCOREBoolResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBoolResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREBoolResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteScalar_USCOREBoolResponse **)soap_malloc(soap, sizeof(_tempuri__ExecuteScalar_USCOREBoolResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteScalar_USCOREBoolResponse *)soap_instantiate__tempuri__ExecuteScalar_USCOREBoolResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteScalar_USCOREBoolResponse ** p = (_tempuri__ExecuteScalar_USCOREBoolResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBoolResponse, sizeof(_tempuri__ExecuteScalar_USCOREBoolResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREBoolResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse);
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(soap, tag?tag:"tempuri:ExecuteScalar_BoolResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBoolResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(struct soap *soap, _tempuri__ExecuteScalar_USCOREBoolResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteScalar_USCOREBoolResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteScalar_USCOREBool(struct soap *soap, _tempuri__ExecuteScalar_USCOREBool *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const char *tag, int id, _tempuri__ExecuteScalar_USCOREBool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBool ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteScalar_USCOREBool(struct soap *soap, const char *tag, _tempuri__ExecuteScalar_USCOREBool **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteScalar_USCOREBool **)soap_malloc(soap, sizeof(_tempuri__ExecuteScalar_USCOREBool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteScalar_USCOREBool *)soap_instantiate__tempuri__ExecuteScalar_USCOREBool(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteScalar_USCOREBool ** p = (_tempuri__ExecuteScalar_USCOREBool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteScalar_USCOREBool, sizeof(_tempuri__ExecuteScalar_USCOREBool), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteScalar_USCOREBool(struct soap *soap, _tempuri__ExecuteScalar_USCOREBool *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteScalar_USCOREBool);
	if (soap_out_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, tag?tag:"tempuri:ExecuteScalar_Bool", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteScalar_USCOREBool ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteScalar_USCOREBool(struct soap *soap, _tempuri__ExecuteScalar_USCOREBool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteScalar_USCOREBool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteNonQueryResponse(struct soap *soap, _tempuri__ExecuteNonQueryResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteNonQueryResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteNonQueryResponse(struct soap *soap, const char *tag, int id, _tempuri__ExecuteNonQueryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteNonQueryResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteNonQueryResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteNonQueryResponse(struct soap *soap, const char *tag, _tempuri__ExecuteNonQueryResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteNonQueryResponse **)soap_malloc(soap, sizeof(_tempuri__ExecuteNonQueryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteNonQueryResponse *)soap_instantiate__tempuri__ExecuteNonQueryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteNonQueryResponse ** p = (_tempuri__ExecuteNonQueryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteNonQueryResponse, sizeof(_tempuri__ExecuteNonQueryResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteNonQueryResponse(struct soap *soap, _tempuri__ExecuteNonQueryResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteNonQueryResponse);
	if (soap_out_PointerTo_tempuri__ExecuteNonQueryResponse(soap, tag?tag:"tempuri:ExecuteNonQueryResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteNonQueryResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteNonQueryResponse(struct soap *soap, _tempuri__ExecuteNonQueryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteNonQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__ExecuteNonQuery(struct soap *soap, _tempuri__ExecuteNonQuery *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__ExecuteNonQuery))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__ExecuteNonQuery(struct soap *soap, const char *tag, int id, _tempuri__ExecuteNonQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__ExecuteNonQuery);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__ExecuteNonQuery ** SOAP_FMAC4 soap_in_PointerTo_tempuri__ExecuteNonQuery(struct soap *soap, const char *tag, _tempuri__ExecuteNonQuery **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__ExecuteNonQuery **)soap_malloc(soap, sizeof(_tempuri__ExecuteNonQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__ExecuteNonQuery *)soap_instantiate__tempuri__ExecuteNonQuery(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__ExecuteNonQuery ** p = (_tempuri__ExecuteNonQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__ExecuteNonQuery, sizeof(_tempuri__ExecuteNonQuery), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__ExecuteNonQuery(struct soap *soap, _tempuri__ExecuteNonQuery *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__ExecuteNonQuery);
	if (soap_out_PointerTo_tempuri__ExecuteNonQuery(soap, tag?tag:"tempuri:ExecuteNonQuery", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__ExecuteNonQuery ** SOAP_FMAC4 soap_get_PointerTo_tempuri__ExecuteNonQuery(struct soap *soap, _tempuri__ExecuteNonQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__ExecuteNonQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__GetstringResponse(struct soap *soap, _tempuri__GetstringResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__GetstringResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__GetstringResponse(struct soap *soap, const char *tag, int id, _tempuri__GetstringResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__GetstringResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__GetstringResponse ** SOAP_FMAC4 soap_in_PointerTo_tempuri__GetstringResponse(struct soap *soap, const char *tag, _tempuri__GetstringResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__GetstringResponse **)soap_malloc(soap, sizeof(_tempuri__GetstringResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__GetstringResponse *)soap_instantiate__tempuri__GetstringResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__GetstringResponse ** p = (_tempuri__GetstringResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__GetstringResponse, sizeof(_tempuri__GetstringResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__GetstringResponse(struct soap *soap, _tempuri__GetstringResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__GetstringResponse);
	if (soap_out_PointerTo_tempuri__GetstringResponse(soap, tag?tag:"tempuri:GetstringResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__GetstringResponse ** SOAP_FMAC4 soap_get_PointerTo_tempuri__GetstringResponse(struct soap *soap, _tempuri__GetstringResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__GetstringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__Getstring(struct soap *soap, _tempuri__Getstring *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__Getstring))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__Getstring(struct soap *soap, const char *tag, int id, _tempuri__Getstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__Getstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__Getstring ** SOAP_FMAC4 soap_in_PointerTo_tempuri__Getstring(struct soap *soap, const char *tag, _tempuri__Getstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__Getstring **)soap_malloc(soap, sizeof(_tempuri__Getstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__Getstring *)soap_instantiate__tempuri__Getstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__Getstring ** p = (_tempuri__Getstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__Getstring, sizeof(_tempuri__Getstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__Getstring(struct soap *soap, _tempuri__Getstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__Getstring);
	if (soap_out_PointerTo_tempuri__Getstring(soap, tag?tag:"tempuri:Getstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__Getstring ** SOAP_FMAC4 soap_get_PointerTo_tempuri__Getstring(struct soap *soap, _tempuri__Getstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__Getstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOfstring(struct soap *soap, ns2__ArrayOfstring *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__ArrayOfstring))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOfstring(struct soap *soap, const char *tag, int id, ns2__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__ArrayOfstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns2__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOfstring(struct soap *soap, const char *tag, ns2__ArrayOfstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__ArrayOfstring **)soap_malloc(soap, sizeof(ns2__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__ArrayOfstring *)soap_instantiate_ns2__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns2__ArrayOfstring ** p = (ns2__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__ArrayOfstring, sizeof(ns2__ArrayOfstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOfstring(struct soap *soap, ns2__ArrayOfstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons2__ArrayOfstring);
	if (soap_out_PointerTons2__ArrayOfstring(soap, tag?tag:"ns2:ArrayOfstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOfstring(struct soap *soap, ns2__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, _tempuri__DataAdapterResponse_DataAdapterResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, const char *tag, int id, _tempuri__DataAdapterResponse_DataAdapterResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse_DataAdapterResult ** SOAP_FMAC4 soap_in_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, const char *tag, _tempuri__DataAdapterResponse_DataAdapterResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_tempuri__DataAdapterResponse_DataAdapterResult **)soap_malloc(soap, sizeof(_tempuri__DataAdapterResponse_DataAdapterResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_tempuri__DataAdapterResponse_DataAdapterResult *)soap_instantiate__tempuri__DataAdapterResponse_DataAdapterResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_tempuri__DataAdapterResponse_DataAdapterResult ** p = (_tempuri__DataAdapterResponse_DataAdapterResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__tempuri__DataAdapterResponse_DataAdapterResult, sizeof(_tempuri__DataAdapterResponse_DataAdapterResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, _tempuri__DataAdapterResponse_DataAdapterResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult);
	if (soap_out_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, tag?tag:"tempuri:DataAdapterResponse-DataAdapterResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _tempuri__DataAdapterResponse_DataAdapterResult ** SOAP_FMAC4 soap_get_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(struct soap *soap, _tempuri__DataAdapterResponse_DataAdapterResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_tempuri__DataAdapterResponse_DataAdapterResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap *soap, const char *tag, int id, xsd__anyType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap *soap, const char *tag, xsd__anyType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__anyType **)soap_malloc(soap, sizeof(xsd__anyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__anyType *)soap_instantiate_xsd__anyType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__anyType ** p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), 0);
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__string, sizeof(xsd__string), 0);
		}
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__ArrayOfstring, sizeof(ns2__ArrayOfstring), 0);
		}
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__anyType);
	if (soap_out_PointerToxsd__anyType(soap, tag?tag:"xsd:anyType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap *soap, xsd__anyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTobool);
	if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
