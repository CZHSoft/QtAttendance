// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* test.h
   Generated by wsdl2h 2.8.9 from http://localhost:7788/LT_WCF?WSDL and typemap.dat
   2012-08-24 02:27:00 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2012 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on test.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tempuri = "http://tempuri.org/"
ns1 = "http://tempuri.org/Imports"
ns1 = "http://tempuri.org/Imports"
ns2 = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/Imports"
//gsoap ns1   schema namespace:	http://tempuri.org/Imports
//gsoap ns1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_tempuri	"http://tempuri.org/"
//gsoap tempuri schema namespace:	http://tempuri.org/
//gsoap tempuri schema elementForm:	qualified
//gsoap tempuri schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/Imports"
//gsoap ns1   schema namespace:	http://tempuri.org/Imports
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
//gsoap ns2   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/Arrays
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified
class xsd__anyType { _XML __item; struct soap *soap; };

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h)
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h)
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};

/// Built-in element "xs:schema".
typedef _XML _xsd__schema;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _tempuri__Getstring.
class _tempuri__Getstring;

//  Forward declaration of class _tempuri__GetstringResponse.
class _tempuri__GetstringResponse;

//  Forward declaration of class _tempuri__ExecuteNonQuery.
class _tempuri__ExecuteNonQuery;

//  Forward declaration of class _tempuri__ExecuteNonQueryResponse.
class _tempuri__ExecuteNonQueryResponse;

//  Forward declaration of class _tempuri__ExecuteScalar_USCOREBool.
class _tempuri__ExecuteScalar_USCOREBool;

//  Forward declaration of class _tempuri__ExecuteScalar_USCOREBoolResponse.
class _tempuri__ExecuteScalar_USCOREBoolResponse;

//  Forward declaration of class _tempuri__ExecuteScalar_USCOREString.
class _tempuri__ExecuteScalar_USCOREString;

//  Forward declaration of class _tempuri__ExecuteScalar_USCOREStringResponse.
class _tempuri__ExecuteScalar_USCOREStringResponse;

//  Forward declaration of class _tempuri__ExecuteScalar_USCOREObject.
class _tempuri__ExecuteScalar_USCOREObject;

//  Forward declaration of class _tempuri__ExecuteScalar_USCOREObjectResponse.
class _tempuri__ExecuteScalar_USCOREObjectResponse;

//  Forward declaration of class _tempuri__DataAdapter.
class _tempuri__DataAdapter;

//  Forward declaration of class _tempuri__DataAdapterResponse.
class _tempuri__DataAdapterResponse;

//  Forward declaration of class _tempuri__ExecuteSqlTransaction_USCOREBool.
class _tempuri__ExecuteSqlTransaction_USCOREBool;

//  Forward declaration of class _tempuri__ExecuteSqlTransaction_USCOREBoolResponse.
class _tempuri__ExecuteSqlTransaction_USCOREBoolResponse;

//  Forward declaration of class _ns1__DataSet.
class _ns1__DataSet;

//  Forward declaration of class ns2__ArrayOfstring.
class ns2__ArrayOfstring;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://tempuri.org/":Getstring

/// "http://tempuri.org/":Getstring is a complexType.
class _tempuri__Getstring
{ public:
/// Element InStr of type xs:string.
    std::string*                         InStr                          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetstringResponse

/// "http://tempuri.org/":GetstringResponse is a complexType.
class _tempuri__GetstringResponse
{ public:
/// Element GetstringResult of type xs:string.
    std::string*                         GetstringResult                0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteNonQuery

/// "http://tempuri.org/":ExecuteNonQuery is a complexType.
class _tempuri__ExecuteNonQuery
{ public:
/// Element SqlTxt of type xs:string.
    std::string*                         SqlTxt                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteNonQueryResponse

/// "http://tempuri.org/":ExecuteNonQueryResponse is a complexType.
class _tempuri__ExecuteNonQueryResponse
{ public:
/// Element ExecuteNonQueryResult of type xs:boolean.
    bool*                                ExecuteNonQueryResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteScalar_Bool

/// "http://tempuri.org/":ExecuteScalar_Bool is a complexType.
class _tempuri__ExecuteScalar_USCOREBool
{ public:
/// Element SqlTxt of type xs:string.
    std::string*                         SqlTxt                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteScalar_BoolResponse

/// "http://tempuri.org/":ExecuteScalar_BoolResponse is a complexType.
class _tempuri__ExecuteScalar_USCOREBoolResponse
{ public:
/// Element ExecuteScalar_BoolResult of type xs:boolean.
    bool*                                ExecuteScalar_USCOREBoolResult 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteScalar_String

/// "http://tempuri.org/":ExecuteScalar_String is a complexType.
class _tempuri__ExecuteScalar_USCOREString
{ public:
/// Element SqlTxt of type xs:string.
    std::string*                         SqlTxt                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteScalar_StringResponse

/// "http://tempuri.org/":ExecuteScalar_StringResponse is a complexType.
class _tempuri__ExecuteScalar_USCOREStringResponse
{ public:
/// Element ExecuteScalar_StringResult of type xs:string.
    std::string*                         ExecuteScalar_USCOREStringResult 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteScalar_Object

/// "http://tempuri.org/":ExecuteScalar_Object is a complexType.
class _tempuri__ExecuteScalar_USCOREObject
{ public:
/// Element SqlTxt of type xs:string.
    std::string*                         SqlTxt                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteScalar_ObjectResponse

/// "http://tempuri.org/":ExecuteScalar_ObjectResponse is a complexType.
class _tempuri__ExecuteScalar_USCOREObjectResponse
{ public:
/// Element ExecuteScalar_ObjectResult of type xs:anyType.
    xsd__anyType*                        ExecuteScalar_USCOREObjectResult 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":DataAdapter

/// "http://tempuri.org/":DataAdapter is a complexType.
class _tempuri__DataAdapter
{ public:
/// Element SqlTxt of type xs:string.
    std::string*                         SqlTxt                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":DataAdapterResponse

/// "http://tempuri.org/":DataAdapterResponse is a complexType.
class _tempuri__DataAdapterResponse
{ public:
    class _tempuri__DataAdapterResponse_DataAdapterResult
    {
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// TODO: <any namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *DataAdapterResult              0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteSqlTransaction_Bool

/// "http://tempuri.org/":ExecuteSqlTransaction_Bool is a complexType.
class _tempuri__ExecuteSqlTransaction_USCOREBool
{ public:
/// Element transactionName of type xs:string.
    std::string*                         transactionName                0;	///< Nullable pointer.
/// Element cmdTextArray of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns2__ArrayOfstring*                  cmdTextArray                   0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ExecuteSqlTransaction_BoolResponse

/// "http://tempuri.org/":ExecuteSqlTransaction_BoolResponse is a complexType.
class _tempuri__ExecuteSqlTransaction_USCOREBoolResponse
{ public:
/// Element ExecuteSqlTransaction_BoolResult of type xs:boolean.
    bool*                                ExecuteSqlTransaction_USCOREBoolResult 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://tempuri.org/Imports":DataSet

/// "http://tempuri.org/Imports":DataSet is a complexType.
class _ns1__DataSet
{ public:
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// TODO: <any namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring is a complexType.
class ns2__ArrayOfstring : public xsd__anyType
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > string                         0;	///< Nullable pointer.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap tempuri service name:	BasicHttpBinding_USCOREIService 
//gsoap tempuri service type:	IService 
//gsoap tempuri service port:	http://localhost:7788/LT_WCF 
//gsoap tempuri service namespace:	http://tempuri.org/ 
//gsoap tempuri service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage LTService Definitions

@section LTService_bindings Service Bindings

  - @ref BasicHttpBinding_USCOREIService

@section LTService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BasicHttpBinding_USCOREIService Binding "BasicHttpBinding_USCOREIService"

@section BasicHttpBinding_USCOREIService_operations Operations of Binding  "BasicHttpBinding_USCOREIService"

  - @ref __tempuri__Getstring

  - @ref __tempuri__ExecuteNonQuery

  - @ref __tempuri__ExecuteScalar_USCOREBool

  - @ref __tempuri__ExecuteScalar_USCOREString

  - @ref __tempuri__ExecuteScalar_USCOREObject

  - @ref __tempuri__DataAdapter

  - @ref __tempuri__ExecuteSqlTransaction_USCOREBool

@section BasicHttpBinding_USCOREIService_ports Endpoints of Binding  "BasicHttpBinding_USCOREIService"

  - http://localhost:7788/LT_WCF

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCOREIService                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Getstring                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__Getstring" of service binding "BasicHttpBinding_USCOREIService"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IService/Getstring"

  - Addressing method action: "http://tempuri.org//IService/Getstring"

  - Addressing method output action: "http://tempuri.org//IService/GetstringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__Getstring(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _tempuri__Getstring*                tempuri__Getstring,
    // response parameters:
    _tempuri__GetstringResponse*        tempuri__GetstringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Getstring(
    struct soap *soap,
    // request parameters:
    _tempuri__Getstring*                tempuri__Getstring,
    // response parameters:
    _tempuri__GetstringResponse*        tempuri__GetstringResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIServiceService.h):
@code
  class BasicHttpBinding_USCOREIServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	Getstring document
//gsoap tempuri service method-encoding:	Getstring literal
//gsoap tempuri service method-action:	Getstring http://tempuri.org/IService/Getstring
//gsoap tempuri service method-output-action:	Getstring http://tempuri.org//IService/GetstringResponse
int __tempuri__Getstring(
    _tempuri__Getstring*                tempuri__Getstring,	///< Request parameter
    _tempuri__GetstringResponse*        tempuri__GetstringResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ExecuteNonQuery                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__ExecuteNonQuery" of service binding "BasicHttpBinding_USCOREIService"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IService/ExecuteNonQuery"

  - Addressing method action: "http://tempuri.org//IService/ExecuteNonQuery"

  - Addressing method output action: "http://tempuri.org//IService/ExecuteNonQueryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ExecuteNonQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _tempuri__ExecuteNonQuery*          tempuri__ExecuteNonQuery,
    // response parameters:
    _tempuri__ExecuteNonQueryResponse*  tempuri__ExecuteNonQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ExecuteNonQuery(
    struct soap *soap,
    // request parameters:
    _tempuri__ExecuteNonQuery*          tempuri__ExecuteNonQuery,
    // response parameters:
    _tempuri__ExecuteNonQueryResponse*  tempuri__ExecuteNonQueryResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIServiceService.h):
@code
  class BasicHttpBinding_USCOREIServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	ExecuteNonQuery document
//gsoap tempuri service method-encoding:	ExecuteNonQuery literal
//gsoap tempuri service method-action:	ExecuteNonQuery http://tempuri.org/IService/ExecuteNonQuery
//gsoap tempuri service method-output-action:	ExecuteNonQuery http://tempuri.org//IService/ExecuteNonQueryResponse
int __tempuri__ExecuteNonQuery(
    _tempuri__ExecuteNonQuery*          tempuri__ExecuteNonQuery,	///< Request parameter
    _tempuri__ExecuteNonQueryResponse*  tempuri__ExecuteNonQueryResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ExecuteScalar_USCOREBool                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__ExecuteScalar_USCOREBool" of service binding "BasicHttpBinding_USCOREIService"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IService/ExecuteScalar_Bool"

  - Addressing method action: "http://tempuri.org//IService/ExecuteScalar_USCOREBool"

  - Addressing method output action: "http://tempuri.org//IService/ExecuteScalar_USCOREBoolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ExecuteScalar_USCOREBool(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _tempuri__ExecuteScalar_USCOREBool* tempuri__ExecuteScalar_USCOREBool,
    // response parameters:
    _tempuri__ExecuteScalar_USCOREBoolResponse* tempuri__ExecuteScalar_USCOREBoolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ExecuteScalar_USCOREBool(
    struct soap *soap,
    // request parameters:
    _tempuri__ExecuteScalar_USCOREBool* tempuri__ExecuteScalar_USCOREBool,
    // response parameters:
    _tempuri__ExecuteScalar_USCOREBoolResponse* tempuri__ExecuteScalar_USCOREBoolResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIServiceService.h):
@code
  class BasicHttpBinding_USCOREIServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	ExecuteScalar_USCOREBool document
//gsoap tempuri service method-encoding:	ExecuteScalar_USCOREBool literal
//gsoap tempuri service method-action:	ExecuteScalar_USCOREBool http://tempuri.org/IService/ExecuteScalar_Bool
//gsoap tempuri service method-output-action:	ExecuteScalar_USCOREBool http://tempuri.org//IService/ExecuteScalar_USCOREBoolResponse
int __tempuri__ExecuteScalar_USCOREBool(
    _tempuri__ExecuteScalar_USCOREBool* tempuri__ExecuteScalar_USCOREBool,	///< Request parameter
    _tempuri__ExecuteScalar_USCOREBoolResponse* tempuri__ExecuteScalar_USCOREBoolResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ExecuteScalar_USCOREString                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__ExecuteScalar_USCOREString" of service binding "BasicHttpBinding_USCOREIService"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IService/ExecuteScalar_String"

  - Addressing method action: "http://tempuri.org//IService/ExecuteScalar_USCOREString"

  - Addressing method output action: "http://tempuri.org//IService/ExecuteScalar_USCOREStringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ExecuteScalar_USCOREString(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _tempuri__ExecuteScalar_USCOREString* tempuri__ExecuteScalar_USCOREString,
    // response parameters:
    _tempuri__ExecuteScalar_USCOREStringResponse* tempuri__ExecuteScalar_USCOREStringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ExecuteScalar_USCOREString(
    struct soap *soap,
    // request parameters:
    _tempuri__ExecuteScalar_USCOREString* tempuri__ExecuteScalar_USCOREString,
    // response parameters:
    _tempuri__ExecuteScalar_USCOREStringResponse* tempuri__ExecuteScalar_USCOREStringResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIServiceService.h):
@code
  class BasicHttpBinding_USCOREIServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	ExecuteScalar_USCOREString document
//gsoap tempuri service method-encoding:	ExecuteScalar_USCOREString literal
//gsoap tempuri service method-action:	ExecuteScalar_USCOREString http://tempuri.org/IService/ExecuteScalar_String
//gsoap tempuri service method-output-action:	ExecuteScalar_USCOREString http://tempuri.org//IService/ExecuteScalar_USCOREStringResponse
int __tempuri__ExecuteScalar_USCOREString(
    _tempuri__ExecuteScalar_USCOREString* tempuri__ExecuteScalar_USCOREString,	///< Request parameter
    _tempuri__ExecuteScalar_USCOREStringResponse* tempuri__ExecuteScalar_USCOREStringResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ExecuteScalar_USCOREObject                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__ExecuteScalar_USCOREObject" of service binding "BasicHttpBinding_USCOREIService"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IService/ExecuteScalar_Object"

  - Addressing method action: "http://tempuri.org//IService/ExecuteScalar_USCOREObject"

  - Addressing method output action: "http://tempuri.org//IService/ExecuteScalar_USCOREObjectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ExecuteScalar_USCOREObject(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _tempuri__ExecuteScalar_USCOREObject* tempuri__ExecuteScalar_USCOREObject,
    // response parameters:
    _tempuri__ExecuteScalar_USCOREObjectResponse* tempuri__ExecuteScalar_USCOREObjectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ExecuteScalar_USCOREObject(
    struct soap *soap,
    // request parameters:
    _tempuri__ExecuteScalar_USCOREObject* tempuri__ExecuteScalar_USCOREObject,
    // response parameters:
    _tempuri__ExecuteScalar_USCOREObjectResponse* tempuri__ExecuteScalar_USCOREObjectResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIServiceService.h):
@code
  class BasicHttpBinding_USCOREIServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	ExecuteScalar_USCOREObject document
//gsoap tempuri service method-encoding:	ExecuteScalar_USCOREObject literal
//gsoap tempuri service method-action:	ExecuteScalar_USCOREObject http://tempuri.org/IService/ExecuteScalar_Object
//gsoap tempuri service method-output-action:	ExecuteScalar_USCOREObject http://tempuri.org//IService/ExecuteScalar_USCOREObjectResponse
int __tempuri__ExecuteScalar_USCOREObject(
    _tempuri__ExecuteScalar_USCOREObject* tempuri__ExecuteScalar_USCOREObject,	///< Request parameter
    _tempuri__ExecuteScalar_USCOREObjectResponse* tempuri__ExecuteScalar_USCOREObjectResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__DataAdapter                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__DataAdapter" of service binding "BasicHttpBinding_USCOREIService"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IService/DataAdapter"

  - Addressing method action: "http://tempuri.org//IService/DataAdapter"

  - Addressing method output action: "http://tempuri.org//IService/DataAdapterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__DataAdapter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _tempuri__DataAdapter*              tempuri__DataAdapter,
    // response parameters:
    _tempuri__DataAdapterResponse*      tempuri__DataAdapterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__DataAdapter(
    struct soap *soap,
    // request parameters:
    _tempuri__DataAdapter*              tempuri__DataAdapter,
    // response parameters:
    _tempuri__DataAdapterResponse*      tempuri__DataAdapterResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIServiceService.h):
@code
  class BasicHttpBinding_USCOREIServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	DataAdapter document
//gsoap tempuri service method-encoding:	DataAdapter literal
//gsoap tempuri service method-action:	DataAdapter http://tempuri.org/IService/DataAdapter
//gsoap tempuri service method-output-action:	DataAdapter http://tempuri.org//IService/DataAdapterResponse
int __tempuri__DataAdapter(
    _tempuri__DataAdapter*              tempuri__DataAdapter,	///< Request parameter
    _tempuri__DataAdapterResponse*      tempuri__DataAdapterResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__ExecuteSqlTransaction_USCOREBool                              *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__ExecuteSqlTransaction_USCOREBool" of service binding "BasicHttpBinding_USCOREIService"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IService/ExecuteSqlTransaction_Bool"

  - Addressing method action: "http://tempuri.org//IService/ExecuteSqlTransaction_USCOREBool"

  - Addressing method output action: "http://tempuri.org//IService/ExecuteSqlTransaction_USCOREBoolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tempuri__ExecuteSqlTransaction_USCOREBool(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _tempuri__ExecuteSqlTransaction_USCOREBool* tempuri__ExecuteSqlTransaction_USCOREBool,
    // response parameters:
    _tempuri__ExecuteSqlTransaction_USCOREBoolResponse* tempuri__ExecuteSqlTransaction_USCOREBoolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__ExecuteSqlTransaction_USCOREBool(
    struct soap *soap,
    // request parameters:
    _tempuri__ExecuteSqlTransaction_USCOREBool* tempuri__ExecuteSqlTransaction_USCOREBool,
    // response parameters:
    _tempuri__ExecuteSqlTransaction_USCOREBoolResponse* tempuri__ExecuteSqlTransaction_USCOREBoolResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIServiceService.h):
@code
  class BasicHttpBinding_USCOREIServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	ExecuteSqlTransaction_USCOREBool document
//gsoap tempuri service method-encoding:	ExecuteSqlTransaction_USCOREBool literal
//gsoap tempuri service method-action:	ExecuteSqlTransaction_USCOREBool http://tempuri.org/IService/ExecuteSqlTransaction_Bool
//gsoap tempuri service method-output-action:	ExecuteSqlTransaction_USCOREBool http://tempuri.org//IService/ExecuteSqlTransaction_USCOREBoolResponse
int __tempuri__ExecuteSqlTransaction_USCOREBool(
    _tempuri__ExecuteSqlTransaction_USCOREBool* tempuri__ExecuteSqlTransaction_USCOREBool,	///< Request parameter
    _tempuri__ExecuteSqlTransaction_USCOREBoolResponse* tempuri__ExecuteSqlTransaction_USCOREBoolResponse	///< Response parameter
);

/**

@page BasicHttpBinding_USCOREIService Binding "BasicHttpBinding_USCOREIService"

@section BasicHttpBinding_USCOREIService_policy_enablers Policy Enablers of Binding  "BasicHttpBinding_USCOREIService"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://tempuri.org/Imports"

@section tempuri Top-level root elements of schema "http://tempuri.org/"

  - <tempuri:Getstring> @ref _tempuri__Getstring
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__Getstring(struct soap*, _tempuri__Getstring*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__Getstring(struct soap*, _tempuri__Getstring*);
    @endcode

  - <tempuri:GetstringResponse> @ref _tempuri__GetstringResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__GetstringResponse(struct soap*, _tempuri__GetstringResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__GetstringResponse(struct soap*, _tempuri__GetstringResponse*);
    @endcode

  - <tempuri:ExecuteNonQuery> @ref _tempuri__ExecuteNonQuery
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteNonQuery(struct soap*, _tempuri__ExecuteNonQuery*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteNonQuery(struct soap*, _tempuri__ExecuteNonQuery*);
    @endcode

  - <tempuri:ExecuteNonQueryResponse> @ref _tempuri__ExecuteNonQueryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteNonQueryResponse(struct soap*, _tempuri__ExecuteNonQueryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteNonQueryResponse(struct soap*, _tempuri__ExecuteNonQueryResponse*);
    @endcode

  - <tempuri:ExecuteScalar_Bool> @ref _tempuri__ExecuteScalar_USCOREBool
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteScalar_USCOREBool(struct soap*, _tempuri__ExecuteScalar_USCOREBool*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteScalar_USCOREBool(struct soap*, _tempuri__ExecuteScalar_USCOREBool*);
    @endcode

  - <tempuri:ExecuteScalar_BoolResponse> @ref _tempuri__ExecuteScalar_USCOREBoolResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteScalar_USCOREBoolResponse(struct soap*, _tempuri__ExecuteScalar_USCOREBoolResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteScalar_USCOREBoolResponse(struct soap*, _tempuri__ExecuteScalar_USCOREBoolResponse*);
    @endcode

  - <tempuri:ExecuteScalar_String> @ref _tempuri__ExecuteScalar_USCOREString
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteScalar_USCOREString(struct soap*, _tempuri__ExecuteScalar_USCOREString*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteScalar_USCOREString(struct soap*, _tempuri__ExecuteScalar_USCOREString*);
    @endcode

  - <tempuri:ExecuteScalar_StringResponse> @ref _tempuri__ExecuteScalar_USCOREStringResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteScalar_USCOREStringResponse(struct soap*, _tempuri__ExecuteScalar_USCOREStringResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteScalar_USCOREStringResponse(struct soap*, _tempuri__ExecuteScalar_USCOREStringResponse*);
    @endcode

  - <tempuri:ExecuteScalar_Object> @ref _tempuri__ExecuteScalar_USCOREObject
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteScalar_USCOREObject(struct soap*, _tempuri__ExecuteScalar_USCOREObject*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteScalar_USCOREObject(struct soap*, _tempuri__ExecuteScalar_USCOREObject*);
    @endcode

  - <tempuri:ExecuteScalar_ObjectResponse> @ref _tempuri__ExecuteScalar_USCOREObjectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteScalar_USCOREObjectResponse(struct soap*, _tempuri__ExecuteScalar_USCOREObjectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteScalar_USCOREObjectResponse(struct soap*, _tempuri__ExecuteScalar_USCOREObjectResponse*);
    @endcode

  - <tempuri:DataAdapter> @ref _tempuri__DataAdapter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__DataAdapter(struct soap*, _tempuri__DataAdapter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__DataAdapter(struct soap*, _tempuri__DataAdapter*);
    @endcode

  - <tempuri:DataAdapterResponse> @ref _tempuri__DataAdapterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__DataAdapterResponse(struct soap*, _tempuri__DataAdapterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__DataAdapterResponse(struct soap*, _tempuri__DataAdapterResponse*);
    @endcode

  - <tempuri:ExecuteSqlTransaction_Bool> @ref _tempuri__ExecuteSqlTransaction_USCOREBool
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteSqlTransaction_USCOREBool(struct soap*, _tempuri__ExecuteSqlTransaction_USCOREBool*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteSqlTransaction_USCOREBool(struct soap*, _tempuri__ExecuteSqlTransaction_USCOREBool*);
    @endcode

  - <tempuri:ExecuteSqlTransaction_BoolResponse> @ref _tempuri__ExecuteSqlTransaction_USCOREBoolResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap*, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tempuri__ExecuteSqlTransaction_USCOREBoolResponse(struct soap*, _tempuri__ExecuteSqlTransaction_USCOREBoolResponse*);
    @endcode

@section ns1 Top-level root elements of schema "http://tempuri.org/Imports"

  - <ns1:DataSet> @ref _ns1__DataSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DataSet(struct soap*, _ns1__DataSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DataSet(struct soap*, _ns1__DataSet*);
    @endcode

@section ns2 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

  - <ns2:ArrayOfstring> (use wsdl2h option -g to auto-generate)

*/

/* End of test.h */
